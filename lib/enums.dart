/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-dart code generator program.
 * https://github.com/marquesinijatinha/bungie-api-dart
 * Do not edit these files manually.
 */

class ApplicationScopes {
  /** Read basic user profile information such as the user's handle, avatar icon, etc. */
   static const int ReadBasicUserProfile = 1;
  /**
   * Read Group/Clan Forums, Wall, and Members for groups and clans that the user has
   * joined.
   */
   static const int ReadGroups = 2;
  /**
   * Write Group/Clan Forums, Wall, and Members for groups and clans that the user
   * has joined.
   */
   static const int WriteGroups = 4;
  /**
   * Administer Group/Clan Forums, Wall, and Members for groups and clans that the
   * user is a founder or an administrator.
   */
   static const int AdminGroups = 8;
  /** Create new groups, clans, and forum posts. */
   static const int BnetWrite = 16;
  /** Move or equip Destiny items */
   static const int MoveEquipDestinyItems = 32;
  /**
   * Read Destiny 1 Inventory and Vault contents. For Destiny 2, this scope is needed
   * to read anything regarded as private. This is the only scope a Destiny 2 app
   * needs for read operations against Destiny 2 data such as inventory, vault,
   * currency, vendors, milestones, progression, etc.
   */
   static const int ReadDestinyInventoryAndVault = 64;
  /**
   * Read user data such as who they are web notifications, clan/group memberships,
   * recent activity, muted users.
   */
   static const int ReadUserData = 128;
  /**
   * Edit user data such as preferred language, status, motto, avatar selection and
   * theme.
   */
   static const int EditUserData = 256;
  /**
   * Access vendor and advisor data specific to a user. OBSOLETE. This scope is only
   * used on the Destiny 1 API.
   */
   static const int ReadDestinyVendorsAndAdvisors = 512;
  /** Read offer history and claim and apply tokens for the user. */
   static const int ReadAndApplyTokens = 1024;
  /** Can perform actions that will result in a prompt to the user via the Destiny app. */
   static const int AdvancedWriteActions = 2048;
}

class OAuthApplicationType {
   static const int None = 0;
  /**
   * Indicates the application is server based and can keep its secrets from end
   * users and other potential snoops.
   */
   static const int Confidential = 1;
  /**
   * Indicates the application runs in a public place, and it can't be trusted to
   * keep a secret.
   */
   static const int Public = 2;
}

class ApplicationStatus {
  /** No value assigned */
   static const int None = 0;
  /**
   * Application exists and works but will not appear in any public catalog. New
   * applications start in this state, test applications will remain in this state.
   */
   static const int Private = 1;
  /** Active applications that can appear in an catalog. */
   static const int Public = 2;
  /**
   * Application disabled by the owner. All authorizations will be treated as
   * terminated while in this state. Owner can move back to private or public state.
   */
   static const int Disabled = 3;
  /**
   * Application has been blocked by Bungie. It cannot be transitioned out of this
   * state by the owner. Authorizations are terminated when an application is in this
   * state.
   */
   static const int Blocked = 4;
}

class DeveloperRole {
   static const int None = 0;
   static const int Owner = 1;
   static const int TeamMember = 2;
}

class BungieMembershipType {
   static const int None = 0;
   static const int TigerXbox = 1;
   static const int TigerPsn = 2;
   static const int TigerBlizzard = 4;
   static const int TigerDemon = 10;
   static const int BungieNext = 254;
  /**
   * "All" is only valid for searching capabilities: you need to pass the actual
   * matching BungieMembershipType for any query where you pass a known membershipId.
   */
   static const int All = -1;
}

class IgnoreStatus {
   static const int NotIgnored = 0;
   static const int IgnoredUser = 1;
   static const int IgnoredGroup = 2;
   static const int IgnoredByGroup = 4;
   static const int IgnoredPost = 8;
   static const int IgnoredTag = 16;
   static const int IgnoredGlobal = 32;
}

class PartnershipType {
   static const int None = 0;
   static const int Twitch = 1;
}

class ContentPropertyDataTypeEnum {
   static const int None = 0;
   static const int Plaintext = 1;
   static const int Html = 2;
   static const int Dropdown = 3;
   static const int List = 4;
   static const int Json = 5;
   static const int Content = 6;
   static const int Representation = 7;
   static const int Set = 8;
   static const int File = 9;
   static const int FolderSet = 10;
   static const int Date = 11;
   static const int MultilinePlaintext = 12;
   static const int DestinyContent = 13;
   static const int Color = 14;
}

class ForumTopicsCategoryFiltersEnum {
   static const int None = 0;
   static const int Links = 1;
   static const int Questions = 2;
   static const int AnsweredQuestions = 4;
   static const int Media = 8;
   static const int TextOnly = 16;
   static const int Announcement = 32;
   static const int BungieOfficial = 64;
   static const int Polls = 128;
}

class ForumTopicsQuickDateEnum {
   static const int All = 0;
   static const int LastYear = 1;
   static const int LastMonth = 2;
   static const int LastWeek = 3;
   static const int LastDay = 4;
}

class ForumTopicsSortEnum {
   static const int Default = 0;
   static const int LastReplied = 1;
   static const int MostReplied = 2;
   static const int Popularity = 3;
   static const int Controversiality = 4;
   static const int Liked = 5;
   static const int HighestRated = 6;
   static const int MostUpvoted = 7;
}

class ForumMediaType {
   static const int None = 0;
   static const int Image = 1;
   static const int Video = 2;
   static const int Youtube = 3;
}

class ForumPostPopularity {
   static const int Empty = 0;
   static const int Default = 1;
   static const int Discussed = 2;
   static const int CoolStory = 3;
   static const int HeatingUp = 4;
   static const int Hot = 5;
}

class ForumPostCategoryEnums {
   static const int None = 0;
   static const int TextOnly = 1;
   static const int Media = 2;
   static const int Link = 4;
   static const int Poll = 8;
   static const int Question = 16;
   static const int Answered = 32;
   static const int Announcement = 64;
   static const int ContentComment = 128;
   static const int BungieOfficial = 256;
   static const int NinjaOfficial = 512;
   static const int Recruitment = 1024;
}

class ForumFlagsEnum {
   static const int None = 0;
   static const int BungieStaffPost = 1;
   static const int ForumNinjaPost = 2;
   static const int ForumMentorPost = 4;
   static const int TopicBungieStaffPosted = 8;
   static const int TopicBungieVolunteerPosted = 16;
   static const int QuestionAnsweredByBungie = 32;
   static const int QuestionAnsweredByNinja = 64;
   static const int CommunityContent = 128;
}

class GroupType {
   static const int General = 0;
   static const int Clan = 1;
}

class ChatSecuritySetting {
   static const int Group = 0;
   static const int Admins = 1;
}

class GroupHomepage {
   static const int Wall = 0;
   static const int Forum = 1;
   static const int AllianceForum = 2;
}

class MembershipOption {
   static const int Reviewed = 0;
   static const int Open = 1;
   static const int Closed = 2;
}

class GroupPostPublicity {
   static const int Public = 0;
   static const int Alliance = 1;
   static const int Private = 2;
}

class Capabilities {
   static const int None = 0;
   static const int Leaderboards = 1;
   static const int Callsign = 2;
   static const int OptionalConversations = 4;
   static const int ClanBanner = 8;
   static const int D2InvestmentData = 16;
   static const int Tags = 32;
   static const int Alliances = 64;
}

class HostGuidedGamesPermissionLevel {
   static const int None = 0;
   static const int Beginner = 1;
   static const int Member = 2;
}

class RuntimeGroupMemberType {
   static const int None = 0;
   static const int Beginner = 1;
   static const int Member = 2;
   static const int Admin = 3;
   static const int ActingFounder = 4;
   static const int Founder = 5;
}

class DestinyProgressionScope {
   static const int Account = 0;
   static const int Character = 1;
   static const int Clan = 2;
   static const int Item = 3;
   static const int ImplicitFromEquipment = 4;
   static const int Mapped = 5;
   static const int MappedAggregate = 6;
   static const int MappedStat = 7;
   static const int MappedUnlockValue = 8;
}

class DestinyProgressionStepDisplayEffect {
   static const int None = 0;
   static const int Character = 1;
   static const int Item = 2;
}

class TierType {
   static const int Unknown = 0;
   static const int Currency = 1;
   static const int Basic = 2;
   static const int Common = 3;
   static const int Rare = 4;
   static const int Superior = 5;
   static const int Exotic = 6;
}

class BucketScope {
   static const int Character = 0;
   static const int Account = 1;
}

class BucketCategory {
   static const int Invisible = 0;
   static const int Item = 1;
   static const int Currency = 2;
   static const int Equippable = 3;
   static const int Ignored = 4;
}

class ItemLocation {
   static const int Unknown = 0;
   static const int Inventory = 1;
   static const int Vault = 2;
   static const int Vendor = 3;
   static const int Postmaster = 4;
}

class DestinyStatAggregationType {
   static const int CharacterAverage = 0;
   static const int Character = 1;
   static const int Item = 2;
}

class DestinyStatCategory {
   static const int Gameplay = 0;
   static const int Weapon = 1;
   static const int Defense = 2;
   static const int Primary = 3;
}

class EquippingItemBlockAttributes {
   static const int None = 0;
   static const int EquipOnAcquire = 1;
}

class DestinyAmmunitionType {
   static const int None = 0;
   static const int Primary = 1;
   static const int Special = 2;
   static const int Heavy = 3;
   static const int Unknown = 4;
}

class VendorDisplayCategorySortOrder {
   static const int Default = 0;
   static const int SortByTier = 1;
}

class DestinyVendorInteractionRewardSelection {
   static const int None = 0;
   static const int One = 1;
   static const int All = 2;
}

class DestinyVendorReplyType {
   static const int Accept = 0;
   static const int Decline = 1;
   static const int Complete = 2;
}

class VendorInteractionType {
   static const int Unknown = 0;
  /** An interaction shown when you complete a quest and receive a reward. */
   static const int QuestComplete = 1;
  /**
   * An interaction shown when you talk to a Vendor as an intermediary step of a
   * quest.
   */
   static const int QuestContinue = 2;
  /** An interaction shown when you are previewing the vendor's reputation rewards. */
   static const int ReputationPreview = 3;
  /** An interaction shown when you rank up with the vendor. */
   static const int RankUpReward = 4;
  /** An interaction shown when you have tokens to turn in for the vendor. */
   static const int TokenTurnIn = 5;
  /** An interaction shown when you're accepting a new quest. */
   static const int QuestAccept = 6;
  /**
   * Honestly, this doesn't seem consistent to me. It is used to give you choices in
   * the Cryptarch as well as some reward prompts by the Eververse vendor. I'll have
   * to look into that further at some point.
   */
   static const int ProgressTab = 7;
  /** These seem even less consistent. I don't know what these are. */
   static const int End = 8;
  /** Also seem inconsistent. I also don't know what these are offhand. */
   static const int Start = 9;
}

class DestinyItemSortType {
   static const int ItemId = 0;
   static const int Timestamp = 1;
   static const int StackSize = 2;
}

class DestinyVendorItemRefundPolicy {
   static const int NotRefundable = 0;
   static const int DeletesItem = 1;
   static const int RevokesLicense = 2;
}

class DestinyGatingScope {
   static const int None = 0;
   static const int Global = 1;
   static const int Clan = 2;
   static const int Profile = 3;
   static const int Character = 4;
   static const int Item = 5;
   static const int AssumedWorstCase = 6;
}

class SocketTypeActionType {
   static const int InsertPlug = 0;
   static const int InfuseItem = 1;
   static const int ReinitializeSocket = 2;
}

class DestinySocketVisibility {
   static const int Visible = 0;
   static const int Hidden = 1;
   static const int HiddenWhenEmpty = 2;
   static const int HiddenIfNoPlugsAvailable = 3;
}

class DestinySocketCategoryStyle {
   static const int Unknown = 0;
   static const int Reusable = 1;
   static const int Consumable = 2;
   static const int Unlockable = 3;
   static const int Intrinsic = 4;
}

class ActivityGraphNodeHighlightType {
   static const int None = 0;
   static const int Normal = 1;
   static const int Hyper = 2;
   static const int Comet = 3;
   static const int RiseOfIron = 4;
}

class DestinyUnlockValueUIStyle {
  /** Generally, Automatic means "Just show the number" */
   static const int Automatic = 0;
  /**
   * Show the number as a fractional value. For this to make sense, the value being
   * displayed should have a comparable upper bound, like the progress to the next
   * level of a Progression.
   */
   static const int Fraction = 1;
  /**
   * Show the number as a checkbox. 0 Will mean unchecked, any other value will mean
   * checked.
   */
   static const int Checkbox = 2;
  /**
   * Show the number as a percentage. For this to make sense, the value being
   * displayed should have a comparable upper bound, like the progress to the next
   * level of a Progression.
   */
   static const int Percentage = 3;
  /**
   * Show the number as a date and time. The number will be the number of seconds
   * since the Unix Epoch (January 1st, 1970 at midnight UTC). It'll be up to you to
   * convert this into a date and time format understandable to the user in their
   * time zone.
   */
   static const int DateTime = 4;
  /**
   * Show the number as a floating point value that represents a fraction, where 0 is
   * min and 1 is max. For this to make sense, the value being displayed should have
   * a comparable upper bound, like the progress to the next level of a Progression.
   */
   static const int FractionFloat = 5;
  /** Show the number as a straight-up integer. */
   static const int Integer = 6;
  /** Show the number as a time duration. The value will be returned as seconds. */
   static const int TimeDuration = 7;
  /**
   * Don't bother showing the value at all, it's not easily human-interpretable, and
   * used for some internal purpose.
   */
   static const int Hidden = 8;
   static const int Multiplier = 9;
}

class DestinyObjectiveGrantStyle {
   static const int WhenIncomplete = 0;
   static const int WhenComplete = 1;
   static const int Always = 2;
}

class DamageType {
   static const int None = 0;
   static const int Kinetic = 1;
   static const int Arc = 2;
   static const int Thermal = 3;
   static const int Void = 4;
   static const int Raid = 5;
}

class DestinyTalentNodeStepWeaponPerformances {
   static const int None = 0;
   static const int RateOfFire = 1;
   static const int Damage = 2;
   static const int Accuracy = 4;
   static const int Range = 8;
   static const int Zoom = 16;
   static const int Recoil = 32;
   static const int Ready = 64;
   static const int Reload = 128;
   static const int HairTrigger = 256;
   static const int AmmoAndMagazine = 512;
   static const int TrackingAndDetonation = 1024;
   static const int ShotgunSpread = 2048;
   static const int ChargeTime = 4096;
   static const int All = 8191;
}

class DestinyTalentNodeStepImpactEffects {
   static const int None = 0;
   static const int ArmorPiercing = 1;
   static const int Ricochet = 2;
   static const int Flinch = 4;
   static const int CollateralDamage = 8;
   static const int Disorient = 16;
   static const int HighlightTarget = 32;
   static const int All = 63;
}

class DestinyTalentNodeStepGuardianAttributes {
   static const int None = 0;
   static const int Stats = 1;
   static const int Shields = 2;
   static const int Health = 4;
   static const int Revive = 8;
   static const int AimUnderFire = 16;
   static const int Radar = 32;
   static const int Invisibility = 64;
   static const int Reputations = 128;
   static const int All = 255;
}

class DestinyTalentNodeStepLightAbilities {
   static const int None = 0;
   static const int Grenades = 1;
   static const int Melee = 2;
   static const int MovementModes = 4;
   static const int Orbs = 8;
   static const int SuperEnergy = 16;
   static const int SuperMods = 32;
   static const int All = 63;
}

class DestinyTalentNodeStepDamageTypes {
   static const int None = 0;
   static const int Kinetic = 1;
   static const int Arc = 2;
   static const int Solar = 4;
   static const int Void = 8;
   static const int All = 15;
}

class DestinyActivityNavPointType {
   static const int Inactive = 0;
   static const int PrimaryObjective = 1;
   static const int SecondaryObjective = 2;
   static const int TravelObjective = 3;
   static const int PublicEventObjective = 4;
   static const int AmmoCache = 5;
   static const int PointTypeFlag = 6;
   static const int CapturePoint = 7;
   static const int DefensiveEncounter = 8;
   static const int GhostInteraction = 9;
   static const int KillAi = 10;
   static const int QuestItem = 11;
   static const int PatrolMission = 12;
   static const int Incoming = 13;
   static const int ArenaObjective = 14;
   static const int AutomationHint = 15;
   static const int TrackedQuest = 16;
}

class DestinyActivityModeType {
   static const int None = 0;
   static const int Story = 2;
   static const int Strike = 3;
   static const int Raid = 4;
   static const int AllPvP = 5;
   static const int Patrol = 6;
   static const int AllPvE = 7;
   static const int Reserved9 = 9;
   static const int Control = 10;
   static const int Reserved11 = 11;
  /**
   * Clash -> Destiny's name for Team Deathmatch. 4v4 combat, the team with the
   * highest kills at the end of time wins.
   */
   static const int Clash = 12;
   static const int Reserved13 = 13;
   static const int CrimsonDoubles = 15;
   static const int Nightfall = 16;
   static const int HeroicNightfall = 17;
   static const int AllStrikes = 18;
   static const int IronBanner = 19;
   static const int Reserved20 = 20;
   static const int Reserved21 = 21;
   static const int Reserved22 = 22;
   static const int Reserved24 = 24;
   static const int AllMayhem = 25;
   static const int Reserved26 = 26;
   static const int Reserved27 = 27;
   static const int Reserved28 = 28;
   static const int Reserved29 = 29;
   static const int Reserved30 = 30;
   static const int Supremacy = 31;
   static const int PrivateMatchesAll = 32;
   static const int Survival = 37;
   static const int Countdown = 38;
   static const int TrialsOfTheNine = 39;
   static const int Social = 40;
   static const int TrialsCountdown = 41;
   static const int TrialsSurvival = 42;
   static const int IronBannerControl = 43;
   static const int IronBannerClash = 44;
   static const int IronBannerSupremacy = 45;
   static const int ScoredNightfall = 46;
   static const int ScoredHeroicNightfall = 47;
   static const int Rumble = 48;
   static const int AllDoubles = 49;
   static const int Doubles = 50;
   static const int PrivateMatchesClash = 51;
   static const int PrivateMatchesControl = 52;
   static const int PrivateMatchesSupremacy = 53;
   static const int PrivateMatchesCountdown = 54;
   static const int PrivateMatchesSurvival = 55;
   static const int PrivateMatchesMayhem = 56;
   static const int PrivateMatchesRumble = 57;
   static const int HeroicAdventure = 58;
   static const int Showdown = 59;
   static const int Lockdown = 60;
   static const int Scorched = 61;
   static const int ScorchedTeam = 62;
   static const int Gambit = 63;
   static const int AllPvECompetitive = 64;
   static const int Breakthrough = 65;
}

class DestinyActivityModeCategory {
  /** Activities that are neither PVP nor PVE, such as social activities. */
   static const int None = 0;
  /** PvE activities, where you shoot aliens in the face. */
   static const int PvE = 1;
  /** PvP activities, where you teabag other humans in the face. */
   static const int PvP = 2;
  /** PVE competitive activities. */
   static const int PvECompetitive = 3;
}

class DestinyItemSubType {
   static const int None = 0;
  /** DEPRECATED. Items can be both "Crucible" and something else interesting. */
   static const int Crucible = 1;
  /** DEPRECATED. An item can both be "Vanguard" and something else. */
   static const int Vanguard = 2;
  /** DEPRECATED. An item can both be Exotic and something else. */
   static const int Exotic = 5;
   static const int AutoRifle = 6;
   static const int Shotgun = 7;
   static const int Machinegun = 8;
   static const int HandCannon = 9;
   static const int RocketLauncher = 10;
   static const int FusionRifle = 11;
   static const int SniperRifle = 12;
   static const int PulseRifle = 13;
   static const int ScoutRifle = 14;
  /** DEPRECATED. An item can both be CRM and something else. */
   static const int Crm = 16;
   static const int Sidearm = 17;
   static const int Sword = 18;
   static const int Mask = 19;
   static const int Shader = 20;
   static const int Ornament = 21;
   static const int FusionRifleLine = 22;
   static const int GrenadeLauncher = 23;
   static const int SubmachineGun = 24;
   static const int TraceRifle = 25;
   static const int HelmetArmor = 26;
   static const int GauntletsArmor = 27;
   static const int ChestArmor = 28;
   static const int LegArmor = 29;
   static const int ClassArmor = 30;
   static const int Bow = 31;
}

class DestinyGraphNodeState {
   static const int Hidden = 0;
   static const int Visible = 1;
   static const int Teaser = 2;
   static const int Incomplete = 3;
   static const int Completed = 4;
}

class DestinyRewardSourceCategory {
  /** The source doesn't fit well into any of the other types. */
   static const int None = 0;
  /**
   * The source is directly related to the rewards gained by playing an activity or
   * set of activities. This currently includes Quests and other action in-game.
   */
   static const int Activity = 1;
  /** This source is directly related to items that Vendors sell. */
   static const int Vendor = 2;
  /**
   * This source is a custom aggregation of items that can be earned in many ways,
   * but that share some other property in common that is useful to share. For
   * instance, in Destiny 1 we would make "Reward Sources" for every game expansion:
   * that way, you could search reward sources to see what items became available
   * with any given Expansion.
   */
   static const int Aggregate = 3;
}

class PlugUiStyles {
   static const int None = 0;
   static const int Masterwork = 1;
}

class PlugAvailabilityMode {
   static const int Normal = 0;
   static const int UnavailableIfSocketContainsMatchingPlugCategory = 1;
   static const int AvailableIfSocketContainsMatchingPlugCategory = 2;
}

class SocketPlugSources {
  /** If there's no way we can detect to insert new plugs. */
   static const int None = 0;
  /**
   * Use plugs found in the player's inventory, based on the socket type rules (see
   * DestinySocketTypeDefinition for more info)
   *
   * Note that a socket - like Shaders - can have *both* reusable plugs and inventory
   * items inserted theoretically.
   */
   static const int InventorySourced = 1;
  /**
   * Use the DestinyItemSocketsComponent.sockets.reusablePlugs property to determine
   * which plugs are valid for this socket.
   */
   static const int ReusablePlugItems = 2;
  /**
   * Use the ProfilePlugSets component data to determine which plugs are valid for
   * this socket.
   */
   static const int ProfilePlugSet = 4;
  /**
   * Use the CharacterPlugSets component data to determine which plugs are valid for
   * this socket.
   */
   static const int CharacterPlugSet = 8;
}

class ItemPerkVisibility {
   static const int Visible = 0;
   static const int Disabled = 1;
   static const int Hidden = 2;
}

class SpecialItemType {
   static const int None = 0;
   static const int SpecialCurrency = 1;
   static const int Armor = 8;
   static const int Weapon = 9;
   static const int Engram = 23;
   static const int Consumable = 24;
   static const int ExchangeMaterial = 25;
   static const int MissionReward = 27;
   static const int Currency = 29;
}

class DestinyItemType {
   static const int None = 0;
   static const int Currency = 1;
   static const int Armor = 2;
   static const int Weapon = 3;
   static const int Message = 7;
   static const int Engram = 8;
   static const int Consumable = 9;
   static const int ExchangeMaterial = 10;
   static const int MissionReward = 11;
   static const int QuestStep = 12;
   static const int QuestStepComplete = 13;
   static const int Emblem = 14;
   static const int Quest = 15;
   static const int Subclass = 16;
   static const int ClanBanner = 17;
   static const int Aura = 18;
   static const int Mod = 19;
   static const int Dummy = 20;
   static const int Ship = 21;
   static const int Vehicle = 22;
   static const int Emote = 23;
   static const int Ghost = 24;
   static const int Package = 25;
   static const int Bounty = 26;
}

class DestinyClass {
   static const int Titan = 0;
   static const int Hunter = 1;
   static const int Warlock = 2;
   static const int Unknown = 3;
}

class DestinyScope {
   static const int Profile = 0;
   static const int Character = 1;
}

class DestinyPresentationNodeType {
   static const int Default = 0;
   static const int Category = 1;
   static const int Collectibles = 2;
   static const int Records = 3;
}

class DestinyPresentationDisplayStyle {
  /** Display the item as a category, through which sub-items are filtered. */
   static const int Category = 0;
   static const int Badge = 1;
   static const int Medals = 2;
   static const int Collectible = 3;
   static const int Record = 4;
}

class DestinyRecordValueStyle {
   static const int Integer = 0;
   static const int Percentage = 1;
   static const int Milliseconds = 2;
   static const int Boolean = 3;
   static const int Decimal = 4;
}

class DestinyGender {
   static const int Male = 0;
   static const int Female = 1;
   static const int Unknown = 2;
}

class DestinyRecordToastStyle {
   static const int None = 0;
   static const int Record = 1;
   static const int Lore = 2;
   static const int Badge = 3;
   static const int MetaRecord = 4;
   static const int MedalComplete = 5;
}

class DestinyPresentationScreenStyle {
  /** Use the "default" view for the presentation nodes. */
   static const int Default = 0;
  /**
   * Show sub-items as "category sets". In-game, you'd see these as a vertical list
   * of child presentation nodes - armor sets for example - and the icons of items
   * within those sets displayed horizontally.
   */
   static const int CategorySets = 1;
  /**
   * Show sub-items as Badges. (I know, I know. We don't need no stinkin' badges har
   * har har)
   */
   static const int Badge = 2;
}

class GroupAllianceStatus {
   static const int Unallied = 0;
   static const int Parent = 1;
   static const int Child = 2;
}

class GroupPotentialMemberStatus {
   static const int None = 0;
   static const int Applicant = 1;
   static const int Invitee = 2;
}

class ForumRecruitmentIntensityLabel {
   static const int None = 0;
   static const int Casual = 1;
   static const int Professional = 2;
}

class ForumRecruitmentToneLabel {
   static const int None = 0;
   static const int FamilyFriendly = 1;
   static const int Rowdy = 2;
}

class ForumPostSortEnum {
   static const int Default = 0;
   static const int OldestFirst = 1;
}

class GroupDateRange {
   static const int All = 0;
   static const int PastDay = 1;
   static const int PastWeek = 2;
   static const int PastMonth = 3;
   static const int PastYear = 4;
}

class GroupSortBy {
   static const int Name = 0;
   static const int Date = 1;
   static const int Popularity = 2;
   static const int Id = 3;
}

class GroupMemberCountFilter {
   static const int All = 0;
   static const int OneToTen = 1;
   static const int ElevenToOneHundred = 2;
   static const int GreaterThanOneHundred = 3;
}

class IgnoreLength {
   static const int None = 0;
   static const int Week = 1;
   static const int TwoWeeks = 2;
   static const int ThreeWeeks = 3;
   static const int Month = 4;
   static const int ThreeMonths = 5;
   static const int SixMonths = 6;
   static const int Year = 7;
   static const int Forever = 8;
   static const int ThreeMinutes = 9;
   static const int Hour = 10;
   static const int ThirtyDays = 11;
}

class GroupApplicationResolveState {
   static const int Unresolved = 0;
   static const int Accepted = 1;
   static const int Denied = 2;
   static const int Rescinded = 3;
}

class PlatformErrorCodes {
   static const int None = 0;
   static const int Success = 1;
   static const int TransportException = 2;
   static const int UnhandledException = 3;
   static const int NotImplemented = 4;
   static const int SystemDisabled = 5;
   static const int FailedToLoadAvailableLocalesConfiguration = 6;
   static const int ParameterParseFailure = 7;
   static const int ParameterInvalidRange = 8;
   static const int BadRequest = 9;
   static const int AuthenticationInvalid = 10;
   static const int DataNotFound = 11;
   static const int InsufficientPrivileges = 12;
   static const int Duplicate = 13;
  /** Deprecated, please do not check for this value anywhere. */
   static const int UnknownSqlResult = 14;
   static const int ValidationError = 15;
   static const int ValidationMissingFieldError = 16;
   static const int ValidationInvalidInputError = 17;
   static const int InvalidParameters = 18;
   static const int ParameterNotFound = 19;
   static const int UnhandledHttpException = 20;
   static const int NotFound = 21;
   static const int WebAuthModuleAsyncFailed = 22;
   static const int InvalidReturnValue = 23;
   static const int UserBanned = 24;
   static const int InvalidPostBody = 25;
   static const int MissingPostBody = 26;
   static const int ExternalServiceTimeout = 27;
   static const int ValidationLengthError = 28;
   static const int ValidationRangeError = 29;
   static const int JsonDeserializationError = 30;
   static const int ThrottleLimitExceeded = 31;
   static const int ValidationTagError = 32;
   static const int ValidationProfanityError = 33;
   static const int ValidationUrlFormatError = 34;
   static const int ThrottleLimitExceededMinutes = 35;
   static const int ThrottleLimitExceededMomentarily = 36;
   static const int ThrottleLimitExceededSeconds = 37;
   static const int ExternalServiceUnknown = 38;
   static const int ValidationWordLengthError = 39;
   static const int ValidationInvisibleUnicode = 40;
   static const int ValidationBadNames = 41;
   static const int ExternalServiceFailed = 42;
   static const int ServiceRetired = 43;
   static const int UnknownSqlException = 44;
   static const int UnsupportedLocale = 45;
   static const int InvalidPageNumber = 46;
   static const int MaximumPageSizeExceeded = 47;
   static const int ServiceUnsupported = 48;
   static const int ValidationMaximumUnicodeCombiningCharacters = 49;
   static const int ValidationMaximumSequentialCarriageReturns = 50;
   static const int PerEndpointRequestThrottleExceeded = 51;
   static const int AuthContextCacheAssertion = 52;
   static const int ExPlatformStringValidationError = 53;
   static const int ObsoleteCredentialType = 89;
   static const int UnableToUnPairMobileApp = 90;
   static const int UnableToPairMobileApp = 91;
   static const int CannotUseMobileAuthWithNonMobileProvider = 92;
   static const int MissingDeviceCookie = 93;
   static const int FacebookTokenExpired = 94;
   static const int AuthTicketRequired = 95;
   static const int CookieContextRequired = 96;
   static const int UnknownAuthenticationError = 97;
   static const int BungieNetAccountCreationRequired = 98;
   static const int WebAuthRequired = 99;
   static const int ContentUnknownSqlResult = 100;
   static const int ContentNeedUniquePath = 101;
   static const int ContentSqlException = 102;
   static const int ContentNotFound = 103;
   static const int ContentSuccessWithTagAddFail = 104;
   static const int ContentSearchMissingParameters = 105;
   static const int ContentInvalidId = 106;
   static const int ContentPhysicalFileDeletionError = 107;
   static const int ContentPhysicalFileCreationError = 108;
   static const int ContentPerforceSubmissionError = 109;
   static const int ContentPerforceInitializationError = 110;
   static const int ContentDeploymentPackageNotReadyError = 111;
   static const int ContentUploadFailed = 112;
   static const int ContentTooManyResults = 113;
   static const int ContentInvalidState = 115;
   static const int ContentNavigationParentNotFound = 116;
   static const int ContentNavigationParentUpdateError = 117;
   static const int DeploymentPackageNotEditable = 118;
   static const int ContentValidationError = 119;
   static const int ContentPropertiesValidationError = 120;
   static const int ContentTypeNotFound = 121;
   static const int DeploymentPackageNotFound = 122;
   static const int ContentSearchInvalidParameters = 123;
   static const int ContentItemPropertyAggregationError = 124;
   static const int DeploymentPackageFileNotFound = 125;
   static const int ContentPerforceFileHistoryNotFound = 126;
   static const int ContentAssetZipCreationFailure = 127;
   static const int ContentAssetZipCreationBusy = 128;
   static const int ContentProjectNotFound = 129;
   static const int ContentFolderNotFound = 130;
   static const int ContentPackagesInconsistent = 131;
   static const int ContentPackagesInvalidState = 132;
   static const int ContentPackagesInconsistentType = 133;
   static const int ContentCannotDeletePackage = 134;
   static const int ContentLockedForChanges = 135;
   static const int ContentFileUploadFailed = 136;
   static const int ContentNotReviewed = 137;
   static const int ContentPermissionDenied = 138;
   static const int ContentInvalidExternalUrl = 139;
   static const int ContentExternalFileCannotBeImportedLocally = 140;
   static const int ContentTagSaveFailure = 141;
   static const int ContentPerforceUnmatchedFileError = 142;
   static const int ContentPerforceChangelistResultNotFound = 143;
   static const int ContentPerforceChangelistFileItemsNotFound = 144;
   static const int ContentPerforceInvalidRevisionError = 145;
   static const int ContentUnloadedSaveResult = 146;
   static const int ContentPropertyInvalidNumber = 147;
   static const int ContentPropertyInvalidUrl = 148;
   static const int ContentPropertyInvalidDate = 149;
   static const int ContentPropertyInvalidSet = 150;
   static const int ContentPropertyCannotDeserialize = 151;
   static const int ContentRegexValidationFailOnProperty = 152;
   static const int ContentMaxLengthFailOnProperty = 153;
   static const int ContentPropertyUnexpectedDeserializationError = 154;
   static const int ContentPropertyRequired = 155;
   static const int ContentCannotCreateFile = 156;
   static const int ContentInvalidMigrationFile = 157;
   static const int ContentMigrationAlteringProcessedItem = 158;
   static const int ContentPropertyDefinitionNotFound = 159;
   static const int ContentReviewDataChanged = 160;
   static const int ContentRollbackRevisionNotInPackage = 161;
   static const int ContentItemNotBasedOnLatestRevision = 162;
   static const int ContentUnauthorized = 163;
   static const int ContentCannotCreateDeploymentPackage = 164;
   static const int ContentUserNotFound = 165;
   static const int ContentLocalePermissionDenied = 166;
   static const int ContentInvalidLinkToInternalEnvironment = 167;
   static const int ContentInvalidBlacklistedContent = 168;
   static const int ContentMacroMalformedNoContentId = 169;
   static const int ContentMacroMalformedNoTemplateType = 170;
   static const int ContentIllegalBNetMembershipId = 171;
   static const int ContentLocaleDidNotMatchExpected = 172;
   static const int ContentBabelCallFailed = 173;
   static const int ContentEnglishPostLiveForbidden = 174;
   static const int ContentLocaleEditPermissionDenied = 175;
   static const int UserNonUniqueName = 200;
   static const int UserManualLinkingStepRequired = 201;
   static const int UserCreateUnknownSqlResult = 202;
   static const int UserCreateUnknownSqlException = 203;
   static const int UserMalformedMembershipId = 204;
   static const int UserCannotFindRequestedUser = 205;
   static const int UserCannotLoadAccountCredentialLinkInfo = 206;
   static const int UserInvalidMobileAppType = 207;
   static const int UserMissingMobilePairingInfo = 208;
   static const int UserCannotGenerateMobileKeyWhileUsingMobileCredential = 209;
   static const int UserGenerateMobileKeyExistingSlotCollision = 210;
   static const int UserDisplayNameMissingOrInvalid = 211;
   static const int UserCannotLoadAccountProfileData = 212;
   static const int UserCannotSaveUserProfileData = 213;
   static const int UserEmailMissingOrInvalid = 214;
   static const int UserTermsOfUseRequired = 215;
   static const int UserCannotCreateNewAccountWhileLoggedIn = 216;
   static const int UserCannotResolveCentralAccount = 217;
   static const int UserInvalidAvatar = 218;
   static const int UserMissingCreatedUserResult = 219;
   static const int UserCannotChangeUniqueNameYet = 220;
   static const int UserCannotChangeDisplayNameYet = 221;
   static const int UserCannotChangeEmail = 222;
   static const int UserUniqueNameMustStartWithLetter = 223;
   static const int UserNoLinkedAccountsSupportFriendListings = 224;
   static const int UserAcknowledgmentTableFull = 225;
   static const int UserCreationDestinyMembershipRequired = 226;
   static const int UserFriendsTokenNeedsRefresh = 227;
   static const int MessagingUnknownError = 300;
   static const int MessagingSelfError = 301;
   static const int MessagingSendThrottle = 302;
   static const int MessagingNoBody = 303;
   static const int MessagingTooManyUsers = 304;
   static const int MessagingCanNotLeaveConversation = 305;
   static const int MessagingUnableToSend = 306;
   static const int MessagingDeletedUserForbidden = 307;
   static const int MessagingCannotDeleteExternalConversation = 308;
   static const int MessagingGroupChatDisabled = 309;
   static const int MessagingMustIncludeSelfInPrivateMessage = 310;
   static const int MessagingSenderIsBanned = 311;
   static const int MessagingGroupOptionalChatExceededMaximum = 312;
   static const int PrivateMessagingRequiresDestinyMembership = 313;
   static const int AddSurveyAnswersUnknownSqlException = 400;
   static const int ForumBodyCannotBeEmpty = 500;
   static const int ForumSubjectCannotBeEmptyOnTopicPost = 501;
   static const int ForumCannotLocateParentPost = 502;
   static const int ForumThreadLockedForReplies = 503;
   static const int ForumUnknownSqlResultDuringCreatePost = 504;
   static const int ForumUnknownTagCreationError = 505;
   static const int ForumUnknownSqlResultDuringTagItem = 506;
   static const int ForumUnknownExceptionCreatePost = 507;
   static const int ForumQuestionMustBeTopicPost = 508;
   static const int ForumExceptionDuringTagSearch = 509;
   static const int ForumExceptionDuringTopicRetrieval = 510;
   static const int ForumAliasedTagError = 511;
   static const int ForumCannotLocateThread = 512;
   static const int ForumUnknownExceptionEditPost = 513;
   static const int ForumCannotLocatePost = 514;
   static const int ForumUnknownExceptionGetOrCreateTags = 515;
   static const int ForumEditPermissionDenied = 516;
   static const int ForumUnknownSqlResultDuringTagIdRetrieval = 517;
   static const int ForumCannotGetRating = 518;
   static const int ForumUnknownExceptionGetRating = 519;
   static const int ForumRatingsAccessError = 520;
   static const int ForumRelatedPostAccessError = 521;
   static const int ForumLatestReplyAccessError = 522;
   static const int ForumUserStatusAccessError = 523;
   static const int ForumAuthorAccessError = 524;
   static const int ForumGroupAccessError = 525;
   static const int ForumUrlExpectedButMissing = 526;
   static const int ForumRepliesCannotBeEmpty = 527;
   static const int ForumRepliesCannotBeInDifferentGroups = 528;
   static const int ForumSubTopicCannotBeCreatedAtThisThreadLevel = 529;
   static const int ForumCannotCreateContentTopic = 530;
   static const int ForumTopicDoesNotExist = 531;
   static const int ForumContentCommentsNotAllowed = 532;
   static const int ForumUnknownSqlResultDuringEditPost = 533;
   static const int ForumUnknownSqlResultDuringGetPost = 534;
   static const int ForumPostValidationBadUrl = 535;
   static const int ForumBodyTooLong = 536;
   static const int ForumSubjectTooLong = 537;
   static const int ForumAnnouncementNotAllowed = 538;
   static const int ForumCannotShareOwnPost = 539;
   static const int ForumEditNoOp = 540;
   static const int ForumUnknownDatabaseErrorDuringGetPost = 541;
   static const int ForumExceeedMaximumRowLimit = 542;
   static const int ForumCannotSharePrivatePost = 543;
   static const int ForumCannotCrossPostBetweenGroups = 544;
   static const int ForumIncompatibleCategories = 555;
   static const int ForumCannotUseTheseCategoriesOnNonTopicPost = 556;
   static const int ForumCanOnlyDeleteTopics = 557;
   static const int ForumDeleteSqlException = 558;
   static const int ForumDeleteSqlUnknownResult = 559;
   static const int ForumTooManyTags = 560;
   static const int ForumCanOnlyRateTopics = 561;
   static const int ForumBannedPostsCannotBeEdited = 562;
   static const int ForumThreadRootIsBanned = 563;
   static const int ForumCannotUseOfficialTagCategoryAsTag = 564;
   static const int ForumAnswerCannotBeMadeOnCreatePost = 565;
   static const int ForumAnswerCannotBeMadeOnEditPost = 566;
   static const int ForumAnswerPostIdIsNotADirectReplyOfQuestion = 567;
   static const int ForumAnswerTopicIdIsNotAQuestion = 568;
   static const int ForumUnknownExceptionDuringMarkAnswer = 569;
   static const int ForumUnknownSqlResultDuringMarkAnswer = 570;
   static const int ForumCannotRateYourOwnPosts = 571;
   static const int ForumPollsMustBeTheFirstPostInTopic = 572;
   static const int ForumInvalidPollInput = 573;
   static const int ForumGroupAdminEditNonMember = 574;
   static const int ForumCannotEditModeratorEditedPost = 575;
   static const int ForumRequiresDestinyMembership = 576;
   static const int ForumUnexpectedError = 577;
   static const int ForumAgeLock = 578;
   static const int ForumMaxPages = 579;
   static const int ForumMaxPagesOldestFirst = 580;
   static const int ForumCannotApplyForumIdWithoutTags = 581;
   static const int ForumCannotApplyForumIdToNonTopics = 582;
   static const int ForumCannotDownvoteCommunityCreations = 583;
   static const int ForumTopicsMustHaveOfficialCategory = 584;
   static const int ForumRecruitmentTopicMalformed = 585;
   static const int ForumRecruitmentTopicNotFound = 586;
   static const int ForumRecruitmentTopicNoSlotsRemaining = 587;
   static const int ForumRecruitmentTopicKickBan = 588;
   static const int ForumRecruitmentTopicRequirementsNotMet = 589;
   static const int ForumRecruitmentTopicNoPlayers = 590;
   static const int ForumRecruitmentApproveFailMessageBan = 591;
   static const int ForumRecruitmentGlobalBan = 592;
   static const int ForumUserBannedFromThisTopic = 593;
   static const int ForumRecruitmentFireteamMembersOnly = 594;
   static const int ForumRequiresDestiny2Progress = 595;
   static const int GroupMembershipApplicationAlreadyResolved = 601;
   static const int GroupMembershipAlreadyApplied = 602;
   static const int GroupMembershipInsufficientPrivileges = 603;
   static const int GroupIdNotReturnedFromCreation = 604;
   static const int GroupSearchInvalidParameters = 605;
   static const int GroupMembershipPendingApplicationNotFound = 606;
   static const int GroupInvalidId = 607;
   static const int GroupInvalidMembershipId = 608;
   static const int GroupInvalidMembershipType = 609;
   static const int GroupMissingTags = 610;
   static const int GroupMembershipNotFound = 611;
   static const int GroupInvalidRating = 612;
   static const int GroupUserFollowingAccessError = 613;
   static const int GroupUserMembershipAccessError = 614;
   static const int GroupCreatorAccessError = 615;
   static const int GroupAdminAccessError = 616;
   static const int GroupPrivatePostNotViewable = 617;
   static const int GroupMembershipNotLoggedIn = 618;
   static const int GroupNotDeleted = 619;
   static const int GroupUnknownErrorUndeletingGroup = 620;
   static const int GroupDeleted = 621;
   static const int GroupNotFound = 622;
   static const int GroupMemberBanned = 623;
   static const int GroupMembershipClosed = 624;
   static const int GroupPrivatePostOverrideError = 625;
   static const int GroupNameTaken = 626;
   static const int GroupDeletionGracePeriodExpired = 627;
   static const int GroupCannotCheckBanStatus = 628;
   static const int GroupMaximumMembershipCountReached = 629;
   static const int NoDestinyAccountForClanPlatform = 630;
   static const int AlreadyRequestingMembershipForClanPlatform = 631;
   static const int AlreadyClanMemberOnPlatform = 632;
   static const int GroupJoinedCannotSetClanName = 633;
   static const int GroupLeftCannotClearClanName = 634;
   static const int GroupRelationshipRequestPending = 635;
   static const int GroupRelationshipRequestBlocked = 636;
   static const int GroupRelationshipRequestNotFound = 637;
   static const int GroupRelationshipBlockNotFound = 638;
   static const int GroupRelationshipNotFound = 639;
   static const int GroupAlreadyAllied = 641;
   static const int GroupAlreadyMember = 642;
   static const int GroupRelationshipAlreadyExists = 643;
   static const int InvalidGroupTypesForRelationshipRequest = 644;
   static const int GroupAtMaximumAlliances = 646;
   static const int GroupCannotSetClanOnlySettings = 647;
   static const int ClanCannotSetTwoDefaultPostTypes = 648;
   static const int GroupMemberInvalidMemberType = 649;
   static const int GroupInvalidPlatformType = 650;
   static const int GroupMemberInvalidSort = 651;
   static const int GroupInvalidResolveState = 652;
   static const int ClanAlreadyEnabledForPlatform = 653;
   static const int ClanNotEnabledForPlatform = 654;
   static const int ClanEnabledButCouldNotJoinNoAccount = 655;
   static const int ClanEnabledButCouldNotJoinAlreadyMember = 656;
   static const int ClanCannotJoinNoCredential = 657;
   static const int NoClanMembershipForPlatform = 658;
   static const int GroupToGroupFollowLimitReached = 659;
   static const int ChildGroupAlreadyInAlliance = 660;
   static const int OwnerGroupAlreadyInAlliance = 661;
   static const int AllianceOwnerCannotJoinAlliance = 662;
   static const int GroupNotInAlliance = 663;
   static const int ChildGroupCannotInviteToAlliance = 664;
   static const int GroupToGroupAlreadyFollowed = 665;
   static const int GroupToGroupNotFollowing = 666;
   static const int ClanMaximumMembershipReached = 667;
   static const int ClanNameNotValid = 668;
   static const int ClanNameNotValidError = 669;
   static const int AllianceOwnerNotDefined = 670;
   static const int AllianceChildNotDefined = 671;
   static const int ClanCultureIllegalCharacters = 672;
   static const int ClanTagIllegalCharacters = 673;
   static const int ClanRequiresInvitation = 674;
   static const int ClanMembershipClosed = 675;
   static const int ClanInviteAlreadyMember = 676;
   static const int GroupInviteAlreadyMember = 677;
   static const int GroupJoinApprovalRequired = 678;
   static const int ClanTagRequired = 679;
   static const int GroupNameCannotStartOrEndWithWhiteSpace = 680;
   static const int ClanCallsignCannotStartOrEndWithWhiteSpace = 681;
   static const int ClanMigrationFailed = 682;
   static const int ClanNotEnabledAlreadyMemberOfAnotherClan = 683;
   static const int GroupModerationNotPermittedOnNonMembers = 684;
   static const int ClanCreationInWorldServerFailed = 685;
   static const int ClanNotFound = 686;
   static const int ClanMembershipLevelDoesNotPermitThatAction = 687;
   static const int ClanMemberNotFound = 688;
   static const int ClanMissingMembershipApprovers = 689;
   static const int ClanInWrongStateForRequestedAction = 690;
   static const int ClanNameAlreadyUsed = 691;
   static const int ClanTooFewMembers = 692;
   static const int ClanInfoCannotBeWhitespace = 693;
   static const int GroupCultureThrottle = 694;
   static const int ClanTargetDisallowsInvites = 695;
   static const int ClanInvalidOperation = 696;
   static const int ClanFounderCannotLeaveWithoutAbdication = 697;
   static const int ClanNameReserved = 698;
   static const int ClanApplicantInClanSoNowInvited = 699;
   static const int ActivitiesUnknownException = 701;
   static const int ActivitiesParameterNull = 702;
   static const int ActivityCountsDiabled = 703;
   static const int ActivitySearchInvalidParameters = 704;
   static const int ActivityPermissionDenied = 705;
   static const int ShareAlreadyShared = 706;
   static const int ActivityLoggingDisabled = 707;
   static const int ClanRequiresExistingDestinyAccount = 750;
   static const int ItemAlreadyFollowed = 801;
   static const int ItemNotFollowed = 802;
   static const int CannotFollowSelf = 803;
   static const int GroupFollowLimitExceeded = 804;
   static const int TagFollowLimitExceeded = 805;
   static const int UserFollowLimitExceeded = 806;
   static const int FollowUnsupportedEntityType = 807;
   static const int NoValidTagsInList = 900;
   static const int BelowMinimumSuggestionLength = 901;
   static const int CannotGetSuggestionsOnMultipleTagsSimultaneously = 902;
   static const int NotAValidPartialTag = 903;
   static const int TagSuggestionsUnknownSqlResult = 904;
   static const int TagsUnableToLoadPopularTagsFromDatabase = 905;
   static const int TagInvalid = 906;
   static const int TagNotFound = 907;
   static const int SingleTagExpected = 908;
   static const int TagsExceededMaximumPerItem = 909;
   static const int IgnoreInvalidParameters = 1000;
   static const int IgnoreSqlException = 1001;
   static const int IgnoreErrorRetrievingGroupPermissions = 1002;
   static const int IgnoreErrorInsufficientPermission = 1003;
   static const int IgnoreErrorRetrievingItem = 1004;
   static const int IgnoreCannotIgnoreSelf = 1005;
   static const int IgnoreIllegalType = 1006;
   static const int IgnoreNotFound = 1007;
   static const int IgnoreUserGloballyIgnored = 1008;
   static const int IgnoreUserIgnored = 1009;
   static const int NotificationSettingInvalid = 1100;
   static const int PsnApiExpiredAccessToken = 1204;
   static const int PSNExForbidden = 1205;
   static const int PSNExSystemDisabled = 1218;
   static const int PsnApiErrorCodeUnknown = 1223;
   static const int PsnApiErrorWebException = 1224;
   static const int PsnApiBadRequest = 1225;
   static const int PsnApiAccessTokenRequired = 1226;
   static const int PsnApiInvalidAccessToken = 1227;
   static const int PsnApiBannedUser = 1229;
   static const int PsnApiAccountUpgradeRequired = 1230;
   static const int PsnApiServiceTemporarilyUnavailable = 1231;
   static const int PsnApiServerBusy = 1232;
   static const int PsnApiUnderMaintenance = 1233;
   static const int PsnApiProfileUserNotFound = 1234;
   static const int PsnApiProfilePrivacyRestriction = 1235;
   static const int PsnApiProfileUnderMaintenance = 1236;
   static const int PsnApiAccountAttributeMissing = 1237;
   static const int PsnApiNoPermission = 1238;
   static const int PsnApiTargetUserBlocked = 1239;
   static const int XblExSystemDisabled = 1300;
   static const int XblExUnknownError = 1301;
   static const int XblApiErrorWebException = 1302;
   static const int XblStsTokenInvalid = 1303;
   static const int XblStsMissingToken = 1304;
   static const int XblStsExpiredToken = 1305;
   static const int XblAccessToTheSandboxDenied = 1306;
   static const int XblMsaResponseMissing = 1307;
   static const int XblMsaAccessTokenExpired = 1308;
   static const int XblMsaInvalidRequest = 1309;
   static const int XblMsaFriendsRequireSignIn = 1310;
   static const int XblUserActionRequired = 1311;
   static const int XblParentalControls = 1312;
   static const int XblDeveloperAccount = 1313;
   static const int XblUserTokenExpired = 1314;
   static const int XblUserTokenInvalid = 1315;
   static const int XblOffline = 1316;
   static const int XblUnknownErrorCode = 1317;
   static const int XblMsaInvalidGrant = 1318;
   static const int ReportNotYetResolved = 1400;
   static const int ReportOverturnDoesNotChangeDecision = 1401;
   static const int ReportNotFound = 1402;
   static const int ReportAlreadyReported = 1403;
   static const int ReportInvalidResolution = 1404;
   static const int ReportNotAssignedToYou = 1405;
   static const int LegacyGameStatsSystemDisabled = 1500;
   static const int LegacyGameStatsUnknownError = 1501;
   static const int LegacyGameStatsMalformedSneakerNetCode = 1502;
   static const int DestinyAccountAcquisitionFailure = 1600;
   static const int DestinyAccountNotFound = 1601;
   static const int DestinyBuildStatsDatabaseError = 1602;
   static const int DestinyCharacterStatsDatabaseError = 1603;
   static const int DestinyPvPStatsDatabaseError = 1604;
   static const int DestinyPvEStatsDatabaseError = 1605;
   static const int DestinyGrimoireStatsDatabaseError = 1606;
   static const int DestinyStatsParameterMembershipTypeParseError = 1607;
   static const int DestinyStatsParameterMembershipIdParseError = 1608;
   static const int DestinyStatsParameterRangeParseError = 1609;
   static const int DestinyStringItemHashNotFound = 1610;
   static const int DestinyStringSetNotFound = 1611;
   static const int DestinyContentLookupNotFoundForKey = 1612;
   static const int DestinyContentItemNotFound = 1613;
   static const int DestinyContentSectionNotFound = 1614;
   static const int DestinyContentPropertyNotFound = 1615;
   static const int DestinyContentConfigNotFound = 1616;
   static const int DestinyContentPropertyBucketValueNotFound = 1617;
   static const int DestinyUnexpectedError = 1618;
   static const int DestinyInvalidAction = 1619;
   static const int DestinyCharacterNotFound = 1620;
   static const int DestinyInvalidFlag = 1621;
   static const int DestinyInvalidRequest = 1622;
   static const int DestinyItemNotFound = 1623;
   static const int DestinyInvalidCustomizationChoices = 1624;
   static const int DestinyVendorItemNotFound = 1625;
   static const int DestinyInternalError = 1626;
   static const int DestinyVendorNotFound = 1627;
   static const int DestinyRecentActivitiesDatabaseError = 1628;
   static const int DestinyItemBucketNotFound = 1629;
   static const int DestinyInvalidMembershipType = 1630;
   static const int DestinyVersionIncompatibility = 1631;
   static const int DestinyItemAlreadyInInventory = 1632;
   static const int DestinyBucketNotFound = 1633;
  /**
   * Note: This is one of those holdovers from Destiny 1. We didn't change the enum
   * because I am lazy, but in Destiny 2 this would read "
   * DestinyCharacterNotInSocialSpace"
   */
   static const int DestinyCharacterNotInTower = 1634;
   static const int DestinyCharacterNotLoggedIn = 1635;
   static const int DestinyDefinitionsNotLoaded = 1636;
   static const int DestinyInventoryFull = 1637;
   static const int DestinyItemFailedLevelCheck = 1638;
   static const int DestinyItemFailedUnlockCheck = 1639;
   static const int DestinyItemUnequippable = 1640;
   static const int DestinyItemUniqueEquipRestricted = 1641;
   static const int DestinyNoRoomInDestination = 1642;
   static const int DestinyServiceFailure = 1643;
   static const int DestinyServiceRetired = 1644;
   static const int DestinyTransferFailed = 1645;
   static const int DestinyTransferNotFoundForSourceBucket = 1646;
   static const int DestinyUnexpectedResultInVendorTransferCheck = 1647;
   static const int DestinyUniquenessViolation = 1648;
   static const int DestinyErrorDeserializationFailure = 1649;
   static const int DestinyValidAccountTicketRequired = 1650;
   static const int DestinyShardRelayClientTimeout = 1651;
   static const int DestinyShardRelayProxyTimeout = 1652;
   static const int DestinyPGCRNotFound = 1653;
   static const int DestinyAccountMustBeOffline = 1654;
   static const int DestinyCanOnlyEquipInGame = 1655;
   static const int DestinyCannotPerformActionOnEquippedItem = 1656;
   static const int DestinyQuestAlreadyCompleted = 1657;
   static const int DestinyQuestAlreadyTracked = 1658;
   static const int DestinyTrackableQuestsFull = 1659;
   static const int DestinyItemNotTransferrable = 1660;
   static const int DestinyVendorPurchaseNotAllowed = 1661;
   static const int DestinyContentVersionMismatch = 1662;
   static const int DestinyItemActionForbidden = 1663;
   static const int DestinyRefundInvalid = 1664;
   static const int DestinyPrivacyRestriction = 1665;
   static const int DestinyActionInsufficientPrivileges = 1666;
   static const int DestinyInvalidClaimException = 1667;
   static const int DestinyLegacyPlatformRestricted = 1668;
   static const int DestinyLegacyPlatformInUse = 1669;
   static const int DestinyLegacyPlatformInaccessible = 1670;
   static const int DestinyCannotPerformActionAtThisLocation = 1671;
   static const int DestinyThrottledByGameServer = 1672;
   static const int DestinyItemNotTransferrableHasSideEffects = 1673;
   static const int DestinyItemLocked = 1674;
   static const int DestinyCannotAffordMaterialRequirements = 1675;
   static const int DestinyFailedPlugInsertionRules = 1676;
   static const int DestinySocketNotFound = 1677;
   static const int DestinySocketActionNotAllowed = 1678;
   static const int DestinySocketAlreadyHasPlug = 1679;
   static const int DestinyPlugItemNotAvailable = 1680;
   static const int DestinyCharacterLoggedInNotAllowed = 1681;
   static const int DestinyPublicAccountNotAccessible = 1682;
   static const int FbInvalidRequest = 1800;
   static const int FbRedirectMismatch = 1801;
   static const int FbAccessDenied = 1802;
   static const int FbUnsupportedResponseType = 1803;
   static const int FbInvalidScope = 1804;
   static const int FbUnsupportedGrantType = 1805;
   static const int FbInvalidGrant = 1806;
   static const int InvitationExpired = 1900;
   static const int InvitationUnknownType = 1901;
   static const int InvitationInvalidResponseStatus = 1902;
   static const int InvitationInvalidType = 1903;
   static const int InvitationAlreadyPending = 1904;
   static const int InvitationInsufficientPermission = 1905;
   static const int InvitationInvalidCode = 1906;
   static const int InvitationInvalidTargetState = 1907;
   static const int InvitationCannotBeReactivated = 1908;
   static const int InvitationNoRecipients = 1910;
   static const int InvitationGroupCannotSendToSelf = 1911;
   static const int InvitationTooManyRecipients = 1912;
   static const int InvitationInvalid = 1913;
   static const int InvitationNotFound = 1914;
   static const int TokenInvalid = 2000;
   static const int TokenBadFormat = 2001;
   static const int TokenAlreadyClaimed = 2002;
   static const int TokenAlreadyClaimedSelf = 2003;
   static const int TokenThrottling = 2004;
   static const int TokenUnknownRedemptionFailure = 2005;
   static const int TokenPurchaseClaimFailedAfterTokenClaimed = 2006;
   static const int TokenUserAlreadyOwnsOffer = 2007;
   static const int TokenInvalidOfferKey = 2008;
   static const int TokenEmailNotValidated = 2009;
   static const int TokenProvisioningBadVendorOrOffer = 2010;
   static const int TokenPurchaseHistoryUnknownError = 2011;
   static const int TokenThrottleStateUnknownError = 2012;
   static const int TokenUserAgeNotVerified = 2013;
   static const int TokenExceededOfferMaximum = 2014;
   static const int TokenNoAvailableUnlocks = 2015;
   static const int TokenMarketplaceInvalidPlatform = 2016;
   static const int TokenNoMarketplaceCodesFound = 2017;
   static const int TokenOfferNotAvailableForRedemption = 2018;
   static const int TokenUnlockPartialFailure = 2019;
   static const int TokenMarketplaceInvalidRegion = 2020;
   static const int TokenOfferExpired = 2021;
   static const int RAFExceededMaximumReferrals = 2022;
   static const int RAFDuplicateBond = 2023;
   static const int RAFNoValidVeteranDestinyMembershipsFound = 2024;
   static const int RAFNotAValidVeteranUser = 2025;
   static const int RAFCodeAlreadyClaimedOrNotFound = 2026;
   static const int RAFMismatchedDestinyMembershipType = 2027;
   static const int RAFUnableToAccessPurchaseHistory = 2028;
   static const int RAFUnableToCreateBond = 2029;
   static const int RAFUnableToFindBond = 2030;
   static const int RAFUnableToRemoveBond = 2031;
   static const int RAFCannotBondToSelf = 2032;
   static const int RAFInvalidPlatform = 2033;
   static const int RAFGenerateThrottled = 2034;
   static const int RAFUnableToCreateBondVersionMismatch = 2035;
   static const int RAFUnableToRemoveBondVersionMismatch = 2036;
   static const int RAFRedeemThrottled = 2037;
   static const int NoAvailableDiscountCode = 2038;
   static const int DiscountAlreadyClaimed = 2039;
   static const int DiscountClaimFailure = 2040;
   static const int DiscountConfigurationFailure = 2041;
   static const int DiscountGenerationFailure = 2042;
   static const int DiscountAlreadyExists = 2043;
   static const int TokenRequiresCredentialXuid = 2044;
   static const int TokenRequiresCredentialPsnid = 2045;
   static const int OfferRequired = 2046;
   static const int UnknownEververseHistoryError = 2047;
   static const int MissingEververseHistoryError = 2048;
   static const int BungieRewardEmailStateInvalid = 2049;
   static const int BungieRewardNotYetClaimable = 2050;
   static const int ApiExceededMaxKeys = 2100;
   static const int ApiInvalidOrExpiredKey = 2101;
   static const int ApiKeyMissingFromRequest = 2102;
   static const int ApplicationDisabled = 2103;
   static const int ApplicationExceededMax = 2104;
   static const int ApplicationDisallowedByScope = 2105;
   static const int AuthorizationCodeInvalid = 2106;
   static const int OriginHeaderDoesNotMatchKey = 2107;
   static const int AccessNotPermittedByApplicationScope = 2108;
   static const int ApplicationNameIsTaken = 2109;
   static const int RefreshTokenNotYetValid = 2110;
   static const int AccessTokenHasExpired = 2111;
   static const int ApplicationTokenFormatNotValid = 2112;
   static const int ApplicationNotConfiguredForBungieAuth = 2113;
   static const int ApplicationNotConfiguredForOAuth = 2114;
   static const int OAuthAccessTokenExpired = 2115;
   static const int PartnershipInvalidType = 2200;
   static const int PartnershipValidationError = 2201;
   static const int PartnershipValidationTimeout = 2202;
   static const int PartnershipAccessFailure = 2203;
   static const int PartnershipAccountInvalid = 2204;
   static const int PartnershipGetAccountInfoFailure = 2205;
   static const int PartnershipDisabled = 2206;
   static const int PartnershipAlreadyExists = 2207;
   static const int CommunityStreamingUnavailable = 2300;
   static const int TwitchNotLinked = 2500;
   static const int TwitchAccountNotFound = 2501;
   static const int TwitchCouldNotLoadDestinyInfo = 2502;
   static const int TrendingCategoryNotFound = 2600;
   static const int TrendingEntryTypeNotSupported = 2601;
   static const int ReportOffenderNotInPgcr = 2700;
   static const int ReportRequestorNotInPgcr = 2701;
   static const int ReportSubmissionFailed = 2702;
   static const int ReportCannotReportSelf = 2703;
   static const int AwaTypeDisabled = 2800;
   static const int AwaTooManyPendingRequests = 2801;
   static const int AwaTheFeatureRequiresARegisteredDevice = 2802;
   static const int AwaRequestWasUnansweredForTooLong = 2803;
   static const int AwaWriteRequestMissingOrInvalidToken = 2804;
   static const int AwaWriteRequestTokenExpired = 2805;
   static const int AwaWriteRequestTokenUsageLimitReached = 2806;
   static const int ClanFireteamNotFound = 3000;
   static const int ClanFireteamAddNoAlternatesForImmediate = 3001;
   static const int ClanFireteamFull = 3002;
   static const int ClanFireteamAltFull = 3003;
   static const int ClanFireteamBlocked = 3004;
   static const int ClanFireteamPlayerEntryNotFound = 3005;
   static const int ClanFireteamPermissions = 3006;
   static const int ClanFireteamInvalidPlatform = 3007;
   static const int ClanFireteamCannotAdjustSlotCount = 3008;
   static const int ClanFireteamInvalidPlayerPlatform = 3009;
   static const int ClanFireteamNotReadyForInvitesNotEnoughPlayers = 3010;
   static const int ClanFireteamGameInvitesNotSupportForPlatform = 3011;
   static const int ClanFireteamPlatformInvitePreqFailure = 3012;
   static const int ClanFireteamInvalidAuthContext = 3013;
   static const int ClanFireteamInvalidAuthProviderPsn = 3014;
   static const int ClanFireteamPs4SessionFull = 3015;
   static const int ClanFireteamInvalidAuthToken = 3016;
   static const int ClanFireteamScheduledFireteamsDisabled = 3017;
   static const int ClanFireteamNotReadyForInvitesNotScheduledYet = 3018;
   static const int ClanFireteamNotReadyForInvitesClosed = 3019;
   static const int ClanFireteamScheduledFireteamsRequireAdminPermissions = 3020;
   static const int ClanFireteamNonPublicMustHaveClan = 3021;
   static const int ClanFireteamPublicCreationRestriction = 3022;
   static const int ClanFireteamAlreadyJoined = 3023;
   static const int ClanFireteamScheduledFireteamsRange = 3024;
   static const int ClanFireteamPublicCreationRestrictionExtended = 3025;
}

class GroupsForMemberFilter {
   static const int All = 0;
   static const int Founded = 1;
   static const int NonFounded = 2;
}

class DestinyComponentType {
   static const int None = 0;
  /**
   * Profiles is the most basic component, only relevant when calling GetProfile.
   * This returns basic information about the profile, which is almost nothing: a
   * list of characterIds, some information about the last time you logged in, and
   * that most sobering statistic: how long you've played.
   */
   static const int Profiles = 100;
  /**
   * Only applicable for GetProfile, this will return information about receipts for
   * refundable vendor items.
   */
   static const int VendorReceipts = 101;
  /**
   * Asking for this will get you the profile-level inventories, such as your Vault
   * buckets (yeah, the Vault is really inventory buckets located on your Profile)
   */
   static const int ProfileInventories = 102;
  /**
   * This will get you a summary of items on your Profile that we consider to be "
   * currencies", such as Glimmer. I mean, if there's Glimmer in Destiny 2. I didn't
   * say there was Glimmer.
   */
   static const int ProfileCurrencies = 103;
  /**
   * This will get you any progression-related information that exists on a Profile-
   * wide level, across all characters.
   */
   static const int ProfileProgression = 104;
  /** This will get you summary info about each of the characters in the profile. */
   static const int Characters = 200;
  /**
   * This will get you information about any non-equipped items on the character or
   * character(s) in question, if you're allowed to see it. You have to either be
   * authenticated as that user, or that user must allow anonymous viewing of their
   * non-equipped items in Bungie.Net settings to actually get results.
   */
   static const int CharacterInventories = 201;
  /**
   * This will get you information about the progression (faction, experience, etc...
   * "levels") relevant to each character, if you are the currently authenticated
   * user or the user has elected to allow anonymous viewing of its progression info.
   */
   static const int CharacterProgressions = 202;
  /**
   * This will get you just enough information to be able to render the character in
   * 3D if you have written a 3D rendering library for Destiny Characters, or "
   * borrowed" ours. It's okay, I won't tell anyone if you're using it. I'm no snitch.
   * (actually, we don't care if you use it - go to town)
   */
   static const int CharacterRenderData = 203;
  /**
   * This will return info about activities that a user can see and gating on it, if
   * you are the currently authenticated user or the user has elected to allow
   * anonymous viewing of its progression info. Note that the data returned by this
   * can be unfortunately problematic and relatively unreliable in some cases. We'll
   * eventually work on making it more consistently reliable.
   */
   static const int CharacterActivities = 204;
  /**
   * This will return info about the equipped items on the character(s). Everyone can
   * see this.
   */
   static const int CharacterEquipment = 205;
  /**
   * This will return basic info about instanced items - whether they can be equipped,
   * their tracked status, and some info commonly needed in many places (current
   * damage type, primary stat value, etc)
   */
   static const int ItemInstances = 300;
  /**
   * Items can have Objectives (DestinyObjectiveDefinition) bound to them. If they do,
   * this will return info for items that have such bound objectives.
   */
   static const int ItemObjectives = 301;
  /**
   * Items can have perks (DestinyPerkDefinition). If they do, this will return info
   * for what perks are active on items.
   */
   static const int ItemPerks = 302;
  /**
   * If you just want to render the weapon, this is just enough info to do that
   * rendering.
   */
   static const int ItemRenderData = 303;
  /**
   * Items can have stats, like rate of fire. Asking for this component will return
   * requested item's stats if they have stats.
   */
   static const int ItemStats = 304;
  /**
   * Items can have sockets, where plugs can be inserted. Asking for this component
   * will return all info relevant to the sockets on items that have them.
   */
   static const int ItemSockets = 305;
  /**
   * Items can have talent grids, though that matters a lot less frequently than it
   * used to. Asking for this component will return all relevant info about activated
   * Nodes and Steps on this talent grid, like the good ol' days.
   */
   static const int ItemTalentGrids = 306;
  /**
   * Items that *aren't* instanced still have important information you need to know:
   * how much of it you have, the itemHash so you can look up their
   * DestinyInventoryItemDefinition, whether they're locked, etc... Both instanced
   * and non-instanced items will have these properties. You will get this
   * automatically with Inventory components - you only need to pass this when
   * calling GetItem on a specific item.
   */
   static const int ItemCommonData = 307;
  /**
   * Items that are "Plugs" can be inserted into sockets. This returns statuses about
   * those plugs and why they can/can't be inserted. I hear you giggling, there's
   * nothing funny about inserting plugs. Get your head out of the gutter and pay
   * attention!
   */
   static const int ItemPlugStates = 308;
  /**
   * When obtaining vendor information, this will return summary information about
   * the Vendor or Vendors being returned.
   */
   static const int Vendors = 400;
  /**
   * When obtaining vendor information, this will return information about the
   * categories of items provided by the Vendor.
   */
   static const int VendorCategories = 401;
  /**
   * When obtaining vendor information, this will return the information about items
   * being sold by the Vendor.
   */
   static const int VendorSales = 402;
  /**
   * Asking for this component will return you the account's Kiosk statuses: that is,
   * what items have been filled out/acquired. But only if you are the currently
   * authenticated user or the user has elected to allow anonymous viewing of its
   * progression info.
   */
   static const int Kiosks = 500;
  /**
   * A "shortcut" component that will give you all of the item hashes/quantities of
   * items that the requested character can use to determine if an action (purchasing,
   * socket insertion) has the required currency. (recall that all currencies are
   * just items, and that some vendor purchases require items that you might not
   * traditionally consider to be a "currency", like plugs/mods!)
   */
   static const int CurrencyLookups = 600;
  /**
   * Returns summary status information about all "Presentation Nodes". See
   * DestinyPresentationNodeDefinition for more details, but the gist is that these
   * are entities used by the game UI to bucket Collectibles and Records into a
   * hierarchy of categories. You may ask for and use this data if you want to
   * perform similar bucketing in your own UI: or you can skip it and roll your own.
   */
   static const int PresentationNodes = 700;
  /**
   * Returns summary status information about all "Collectibles". These are records
   * of what items you've discovered while playing Destiny, and some other basic
   * information. For detailed information, you will have to call a separate endpoint
   * devoted to the purpose.
   */
   static const int Collectibles = 800;
  /**
   * Returns summary status information about all "Records" (also known in the game
   * as "Triumphs". I know, it's confusing because there's also "Moments of Triumph"
   * that will themselves be represented as "Triumphs.")
   */
   static const int Records = 900;
}

class ComponentPrivacySetting {
   static const int None = 0;
   static const int Public = 1;
   static const int Private = 2;
}

class ItemBindStatus {
   static const int NotBound = 0;
   static const int BoundToCharacter = 1;
   static const int BoundToAccount = 2;
   static const int BoundToGuild = 3;
}

class TransferStatuses {
  /** The item can be transferred. */
   static const int CanTransfer = 0;
  /** You can't transfer the item because it is equipped on a character. */
   static const int ItemIsEquipped = 1;
  /**
   * The item is defined as not transferrable in its DestinyInventoryItemDefinition.
   * nonTransferrable property.
   */
   static const int NotTransferrable = 2;
  /**
   * You could transfer the item, but the place you're trying to put it has run out
   * of room! Check your remaining Vault and/or character space.
   */
   static const int NoRoomInDestination = 4;
}

class ItemState {
   static const int None = 0;
  /**
   * If this bit is set, the item has been "locked" by the user and cannot be deleted.
   * You may want to represent this visually with a "lock" icon.
   */
   static const int Locked = 1;
  /**
   * If this bit is set, the item is a quest that's being tracked by the user. You
   * may want a visual indicator to show that this is a tracked quest.
   */
   static const int Tracked = 2;
  /**
   * If this bit is set, the item has a Masterwork plug inserted. This usually
   * coincides with having a special "glowing" effect applied to the item's icon.
   */
   static const int Masterwork = 4;
}

class DestinyGameVersions {
   static const int None = 0;
   static const int Destiny2 = 1;
   static const int DLC1 = 2;
   static const int DLC2 = 4;
   static const int Forsaken = 8;
}

class DestinyPresentationNodeState {
   static const int None = 0;
  /**
   * If this is set, the game recommends that you not show this node. But you know
   * your life, do what you've got to do.
   */
   static const int Invisible = 1;
  /** Turns out Presentation Nodes can also be obscured. If they are, this is set. */
   static const int Obscured = 2;
}

class DestinyRecordState {
  /**
   * If there are no flags set, the record is in a state where it *could* be redeemed,
   * but it has not been yet.
   */
   static const int None = 0;
  /** If this is set, the completed record has been redeemed. */
   static const int RecordRedeemed = 1;
  /**
   * If this is set, there's a reward available from this Record but it's unavailable
   * for redemption.
   */
   static const int RewardUnavailable = 2;
  /** If this is set, the objective for this Record has not yet been completed. */
   static const int ObjectiveNotCompleted = 4;
  /**
   * If this is set, the game recommends that you replace the display text of this
   * Record with DestinyRecordDefinition.stateInfo.obscuredString.
   */
   static const int Obscured = 8;
  /**
   * If this is set, the game recommends that you not show this record. Do what you
   * will with this recommendation.
   */
   static const int Invisible = 16;
  /**
   * If this is set, you can't complete this record because you lack some permission
   * that's required to complete it.
   */
   static const int EntitlementUnowned = 32;
  /**
   * If this is set, the record has a title (check DestinyRecordDefinition for title
   * info) and you can equip it.
   */
   static const int CanEquipTitle = 64;
}

class DestinyCollectibleState {
   static const int None = 0;
  /** If this flag is set, you have not yet obtained this collectible. */
   static const int NotAcquired = 1;
  /**
   * If this flag is set, the item is "obscured" to you: you can/should use the
   * alternate item hash found in DestinyCollectibleDefinition.stateInfo.
   * obscuredOverrideItemHash when displaying this collectible instead of the default
   * display info.
   */
   static const int Obscured = 2;
  /**
   * If this flag is set, the collectible should not be shown to the user.
   *
   * But, I mean do what you want: I'm not your mom. It's much more likely that I'm
   * your Dad - wait, I promised your mom that I wouldn't tell you. Don't tell her
   * that I told you.
   */
   static const int Invisible = 4;
  /**
   * If this flag is set, the collectible requires payment for creating an instance
   * of the item, and you are lacking in currency. Bring the benjamins next time. Or
   * spinmetal. Whatever.
   */
   static const int CannotAffordMaterialRequirements = 8;
  /**
   * If this flag is set, you can't pull this item out of your collection because
   * there's no room left in your inventory.
   */
   static const int InventorySpaceUnavailable = 16;
  /**
   * If this flag is set, you already have one of these items and can't have a second
   * one.
   */
   static const int UniquenessViolation = 32;
  /**
   * If this flag is set, the ability to pull this item out of your collection has
   * been disabled.
   */
   static const int PurchaseDisabled = 64;
}

class DestinyRace {
   static const int Human = 0;
   static const int Awoken = 1;
   static const int Exo = 2;
   static const int Unknown = 3;
}

class DestinyMilestoneType {
   static const int Unknown = 0;
  /**
   * One-time milestones that are specifically oriented toward teaching players about
   * new mechanics and gameplay modes.
   */
   static const int Tutorial = 1;
  /** Milestones that, once completed a single time, can never be repeated. */
   static const int OneTime = 2;
  /**
   * Milestones that repeat/reset on a weekly basis. They need not all reset on the
   * same day or time, but do need to reset weekly to qualify for this type.
   */
   static const int Weekly = 3;
  /** Milestones that repeat or reset on a daily basis. */
   static const int Daily = 4;
  /**
   * Special indicates that the event is not on a daily/weekly cadence, but does
   * occur more than once. For instance, Iron Banner in Destiny 1 or the Dawning were
   * examples of what could be termed "Special" events.
   */
   static const int Special = 5;
}

class DestinyActivityDifficultyTier {
   static const int Trivial = 0;
   static const int Easy = 1;
   static const int Normal = 2;
   static const int Challenging = 3;
   static const int Hard = 4;
   static const int Brave = 5;
   static const int AlmostImpossible = 6;
   static const int Impossible = 7;
}

class EquipFailureReason {
  /** The item is/was able to be equipped. */
   static const int None = 0;
  /**
   * This is not the kind of item that can be equipped. Did you try equipping Glimmer
   * or something?
   */
   static const int ItemUnequippable = 1;
  /**
   * This item is part of a "unique set", and you can't have more than one item of
   * that same set type equipped at once. For instance, if you already have an Exotic
   * Weapon equipped, you can't equip a second one in another weapon slot.
   */
   static const int ItemUniqueEquipRestricted = 2;
  /**
   * This item has state-based gating that prevents it from being equipped in certain
   * circumstances. For instance, an item might be for Warlocks only and you're a
   * Titan, or it might require you to have beaten some special quest that you haven'
   * t beaten yet. Use the additional failure data passed on the item itself to get
   * more information about what the specific failure case was (See
   * DestinyInventoryItemDefinition and DestinyItemInstanceComponent)
   */
   static const int ItemFailedUnlockCheck = 4;
  /**
   * This item requires you to have reached a specific character level in order to
   * equip it, and you haven't reached that level yet.
   */
   static const int ItemFailedLevelCheck = 8;
  /**
   * This item can't be equipped on the character requested, because it must be in
   * that character's inventory first. Transfer the item to the character you want to
   * equip it before you attempt to equip it.
   */
   static const int ItemNotOnCharacter = 16;
}

class DestinyTalentNodeState {
   static const int Invalid = 0;
   static const int CanUpgrade = 1;
   static const int NoPoints = 2;
   static const int NoPrerequisites = 3;
   static const int NoSteps = 4;
   static const int NoUnlock = 5;
   static const int NoMaterial = 6;
   static const int NoGridLevel = 7;
   static const int SwappingLocked = 8;
   static const int MustSwap = 9;
   static const int Complete = 10;
   static const int Unknown = 11;
   static const int CreationOnly = 12;
   static const int Hidden = 13;
}

class VendorItemStatus {
   static const int Success = 0;
   static const int NoInventorySpace = 1;
   static const int NoFunds = 2;
   static const int NoProgression = 4;
   static const int NoUnlock = 8;
   static const int NoQuantity = 16;
   static const int OutsidePurchaseWindow = 32;
   static const int NotAvailable = 64;
   static const int UniquenessViolation = 128;
   static const int UnknownError = 256;
   static const int AlreadySelling = 512;
   static const int Unsellable = 1024;
   static const int SellingInhibited = 2048;
   static const int AlreadyOwned = 4096;
   static const int DisplayOnly = 8192;
}

class DestinyVendorItemState {
  /** There are no augments on the item. */
   static const int None = 0;
  /**
   * Deprecated forever (probably). There was a time when Records were going to be
   * implemented through Vendors, and this field was relevant. Now they're
   * implemented through Presentation Nodes, and this field doesn't matter anymore.
   */
   static const int Incomplete = 1;
  /**
   * Deprecated forever (probably). See the description of the "Incomplete" value for
   * the juicy scoop.
   */
   static const int RewardAvailable = 2;
  /**
   * Deprecated forever (probably). See the description of the "Incomplete" value for
   * the juicy scoop.
   */
   static const int Complete = 4;
  /**
   * This item is considered to be "newly available", and should have some UI showing
   * how shiny it is.
   */
   static const int New = 8;
  /**
   * This item is being "featured", and should be shiny in a different way from items
   * that are merely new.
   */
   static const int Featured = 16;
  /** This item is only available for a limited time, and that time is approaching. */
   static const int Ending = 32;
  /** This item is "on sale". Get it while it's hot. */
   static const int OnSale = 64;
  /** This item is already owned. */
   static const int Owned = 128;
  /** This item should be shown with a "wide view" instead of normal icon view. */
   static const int WideView = 256;
  /**
   * This indicates that you should show some kind of attention-requesting indicator
   * on the item, in a similar manner to items in the nexus that have such
   * notifications.
   */
   static const int NexusAttention = 512;
}

class DestinySocketArrayType {
   static const int Default = 0;
   static const int Intrinsic = 1;
}

class DestinyStatsGroupType {
   static const int None = 0;
   static const int General = 1;
   static const int Weapons = 2;
   static const int Medals = 3;
  /**
   * This is purely to serve as the dividing line between filterable and un-
   * filterable groups. Below this number is a group you can pass as a filter. Above
   * it are groups used in very specific circumstances and not relevant for filtering.
   */
   static const int ReservedGroups = 100;
  /** Only applicable while generating leaderboards. */
   static const int Leaderboard = 101;
  /** These will *only* be consumed by GetAggregateStatsByActivity */
   static const int Activity = 102;
  /** These are only consumed and returned by GetUniqueWeaponHistory */
   static const int UniqueWeapon = 103;
   static const int Internal = 104;
}

class DestinyStatsCategoryType {
   static const int None = 0;
   static const int Kills = 1;
   static const int Assists = 2;
   static const int Deaths = 3;
   static const int Criticals = 4;
   static const int KDa = 5;
   static const int KD = 6;
   static const int Score = 7;
   static const int Entered = 8;
   static const int TimePlayed = 9;
   static const int MedalWins = 10;
   static const int MedalGame = 11;
   static const int MedalSpecialKills = 12;
   static const int MedalSprees = 13;
   static const int MedalMultiKills = 14;
   static const int MedalAbilities = 15;
}

class UnitType {
   static const int None = 0;
  /** Indicates the statistic is a simple count of something. */
   static const int Count = 1;
  /** Indicates the statistic is a per game average. */
   static const int PerGame = 2;
  /** Indicates the number of seconds */
   static const int Seconds = 3;
  /** Indicates the number of points earned */
   static const int Points = 4;
  /** Values represents a team ID */
   static const int Team = 5;
  /** Values represents a distance (units to-be-determined) */
   static const int Distance = 6;
  /** Ratio represented as a whole value from 0 to 100. */
   static const int Percent = 7;
  /** Ratio of something, shown with decimal places */
   static const int Ratio = 8;
  /** True or false */
   static const int Boolean = 9;
  /** The stat is actually a weapon type. */
   static const int WeaponType = 10;
  /** Indicates victory, defeat, or something in between. */
   static const int Standing = 11;
  /** Number of milliseconds some event spanned. For example, race time, or lap time. */
   static const int Milliseconds = 12;
  /** The value is a enumeration of the Completion Reason type. */
   static const int CompletionReason = 13;
}

class DestinyStatsMergeMethod {
  /** When collapsing multiple instances of the stat together, add the values. */
   static const int Add = 0;
  /** When collapsing multiple instances of the stat together, take the lower value. */
   static const int Min = 1;
  /** When collapsing multiple instances of the stat together, take the higher value. */
   static const int Max = 2;
}

class PeriodType {
   static const int None = 0;
   static const int Daily = 1;
   static const int AllTime = 2;
   static const int Activity = 3;
}

class AwaType {
   static const int None = 0;
  /** Insert plugs into sockets. */
   static const int InsertPlugs = 1;
}

class AwaUserSelection {
   static const int None = 0;
   static const int Rejected = 1;
   static const int Approved = 2;
}

class AwaResponseReason {
   static const int None = 0;
  /** User provided an answer */
   static const int Answered = 1;
  /**
   * The HTTP request timed out, a new request may be made and an answer may still be
   * provided.
   */
   static const int TimedOut = 2;
  /** This request was replaced by another request. */
   static const int Replaced = 3;
}

class CommunityContentSortMode {
   static const int Trending = 0;
   static const int Latest = 1;
   static const int HighestRated = 2;
}

class CommunityStatusSort {
   static const int Viewers = 0;
   static const int Trending = 1;
   static const int OverallViewers = 2;
   static const int Followers = 3;
}

class TrendingEntryType {
   static const int News = 0;
   static const int DestinyItem = 1;
   static const int DestinyActivity = 2;
   static const int DestinyRitual = 3;
   static const int SupportArticle = 4;
   static const int Creation = 5;
   static const int Stream = 6;
   static const int Update = 7;
   static const int Link = 8;
   static const int ForumTag = 9;
   static const int Container = 10;
   static const int Release = 11;
}

class FireteamActivityType {
   static const int All = 0;
   static const int Raid = 1;
   static const int Crucible = 2;
   static const int Trials = 3;
   static const int Nightfall = 4;
   static const int Anything = 5;
   static const int Gambit = 6;
}

class FireteamDateRange {
   static const int All = 0;
   static const int Now = 1;
   static const int TwentyFourHours = 2;
   static const int FortyEightHours = 3;
   static const int ThisWeek = 4;
}

class FireteamPlatform {
   static const int Unknown = 0;
   static const int Playstation4 = 1;
   static const int XboxOne = 2;
   static const int Blizzard = 3;
}

class FireteamPublicSearchOption {
   static const int PublicAndPrivate = 0;
   static const int PublicOnly = 1;
   static const int PrivateOnly = 2;
}

class FireteamSlotSearch {
   static const int NoSlotRestriction = 0;
   static const int HasOpenPlayerSlots = 1;
   static const int HasOpenPlayerOrAltSlots = 2;
}

class FireteamPlatformInviteResult {
   static const int None = 0;
   static const int Success = 1;
   static const int AlreadyInFireteam = 2;
   static const int Throttled = 3;
   static const int ServiceError = 4;
}

class GlobalAlertLevel {
   static const int Unknown = 0;
   static const int Blue = 1;
   static const int Yellow = 2;
   static const int Red = 3;
}

class GlobalAlertType {
   static const int GlobalAlert = 0;
   static const int StreamingAlert = 1;
}
