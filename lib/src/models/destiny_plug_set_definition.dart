import 'package:json_annotation/json_annotation.dart';

import 'destiny_display_properties_definition.dart';
import 'destiny_item_socket_entry_plug_item_randomized_definition.dart';

part 'destiny_plug_set_definition.g.dart';

/// Sometimes, we have large sets of reusable plugs that are defined identically and thus can (and in some cases, are so large that they *must*) be shared across the places where they are used. These are the definitions for those reusable sets of plugs. 
///  See DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the relationship between these reusable plug sets and the sockets that leverage them (for starters, Emotes).
///  As of the release of Shadowkeep (Late 2019), these will begin to be sourced from game content directly - which means there will be many more of them, but it also means we may not get all data that we used to get for them.
///  DisplayProperties, in particular, will no longer be guaranteed to contain valid information. We will make a best effort to guess what ought to be populated there where possible, but it will be invalid for many&#x2F;most plug sets.
@JsonSerializable()
class DestinyPlugSetDefinition{
	
	DestinyPlugSetDefinition();

	factory DestinyPlugSetDefinition.fromJson(Map<String, dynamic> json) {
		try{
			return _$DestinyPlugSetDefinitionFromJson(json);
		}catch(e){
			print(e);
		}
		return null;
	}

	/// If you want to show these plugs in isolation, these are the display properties for them.
	@JsonKey(name:'displayProperties')
	DestinyDisplayPropertiesDefinition displayProperties;
	/// This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.
	/// If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
	@JsonKey(name:'reusablePlugItems')
	List<DestinyItemSocketEntryPlugItemRandomizedDefinition> reusablePlugItems;
	/// Mostly for our debugging or reporting bugs, BNet is making "fake" plug sets in a desperate effort to reduce socket sizes.
	///  If this is true, the plug set was generated by BNet: if it looks wrong, that's a good indicator that it's bungie.net that fucked this up.
	@JsonKey(name:'isFakePlugSet')
	bool isFakePlugSet;
	/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
	/// When entities refer to each other in Destiny content, it is this hash that they are referring to.
	@JsonKey(name:'hash')
	int hash;
	/// The index of the entity as it was found in the investment tables.
	@JsonKey(name:'index')
	int index;
	/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
	@JsonKey(name:'redacted')
	bool redacted;

	
	
	Map<String, dynamic> toJson() => _$DestinyPlugSetDefinitionToJson(this);
}