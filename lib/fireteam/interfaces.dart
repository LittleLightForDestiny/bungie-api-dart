/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-dart code generator program.
 * https://github.com/marquesinijatinha/bungie-api-dart
 * Do not edit these files manually.
 */

import '../common.dart';
import '../user/interfaces.dart';

class FireteamActivityType {
   static const int All = 0;
   static const int Raid = 1;
   static const int Crucible = 2;
   static const int Trials = 3;
   static const int Nightfall = 4;
   static const int Anything = 5;
   static const int Gambit = 6;
}

class FireteamDateRange {
   static const int All = 0;
   static const int Now = 1;
   static const int TwentyFourHours = 2;
   static const int FortyEightHours = 3;
   static const int ThisWeek = 4;
}

class FireteamPlatform {
   static const int Unknown = 0;
   static const int Playstation4 = 1;
   static const int XboxOne = 2;
   static const int Blizzard = 3;
}

class FireteamPublicSearchOption {
   static const int PublicAndPrivate = 0;
   static const int PublicOnly = 1;
   static const int PrivateOnly = 2;
}

class FireteamSlotSearch {
   static const int NoSlotRestriction = 0;
   static const int HasOpenPlayerSlots = 1;
   static const int HasOpenPlayerOrAltSlots = 2;
}

class SearchResultOfFireteamSummary {
  List<FireteamSummary> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class FireteamSummary {
  String fireteamId;
  String groupId;
  FireteamPlatform platform;
  FireteamActivityType activityType;
  bool isImmediate;
  String scheduledTime;
  String ownerMembershipId;
  int playerSlotCount;
  int alternateSlotCount;
  int availablePlayerSlotCount;
  int availableAlternateSlotCount;
  String title;
  String dateCreated;
  String dateModified;
  bool isPublic;
  String locale;
  bool isValid;
  String datePlayerModified;
}

class SearchResultOfFireteamResponse {
  List<FireteamResponse> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class FireteamResponse {
  FireteamSummary Summary;
  List<FireteamMember> Members;
  List<FireteamMember> Alternates;
}

class FireteamMember {
  UserInfoCard destinyUserInfo;
  UserInfoCard bungieNetUserInfo;
  String characterId;
  String dateJoined;
  bool hasMicrophone;
  String lastPlatformInviteAttemptDate;
  FireteamPlatformInviteResult lastPlatformInviteAttemptResult;
}

class FireteamPlatformInviteResult {
   static const int None = 0;
   static const int Success = 1;
   static const int AlreadyInFireteam = 2;
   static const int Throttled = 3;
   static const int ServiceError = 4;
}
