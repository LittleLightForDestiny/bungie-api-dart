/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bugie-api-ts
 * Do not edit these files manually.
 */

import 'dart:async';
import '../http.dart';

import '../common.dart';
import './interfaces.dart';

abstract class GetActivePrivateClanFireteamCountParams {
  /** The group id of the clan. */
  String groupId;
}

/**
 * Gets a count of all active non-public fireteams for the specified clan. Maximum
 * value returned is 25.
 */
  Future<ServerResponse<int>> getActivePrivateClanFireteamCount(HttpClient http, GetActivePrivateClanFireteamCountParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Fireteam/Clan/${params.groupId}/ActiveCount/",
    null,
    null
    ));
}

abstract class GetAvailableClanFireteamsParams {
  /** The activity type to filter by. */
  FireteamActivityType activityType;
  /** The date range to grab available fireteams. */
  FireteamDateRange dateRange;
  /** The group id of the clan. */
  String groupId;
  /** An optional language filter. */
  String langFilter;
  /** Zero based page */
  int page;
  /** The platform filter. */
  FireteamPlatform platform;
  /** Determines public/private filtering. */
  FireteamPublicSearchOption publicOnly;
  /** Filters based on available slots */
  FireteamSlotSearch slotFilter;
}

/**
 * Gets a listing of all of this clan's fireteams that are have available slots.
 * Caller is not checked for join criteria so caching is maximized.
 */
  Future<ServerResponse<SearchResultOfFireteamSummary>> getAvailableClanFireteams(HttpClient http, GetAvailableClanFireteamsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Fireteam/Clan/${params.groupId}/Available/${params.platform}/${params.activityType}/${params.dateRange}/${params.slotFilter}/${params.publicOnly}/${params.page}/",
    {
      'langFilter': params.langFilter
    },
    null
    ));
}

abstract class SearchPublicAvailableClanFireteamsParams {
  /** The activity type to filter by. */
  FireteamActivityType activityType;
  /** The date range to grab available fireteams. */
  FireteamDateRange dateRange;
  /** An optional language filter. */
  String langFilter;
  /** Zero based page */
  int page;
  /** The platform filter. */
  FireteamPlatform platform;
  /** Filters based on available slots */
  FireteamSlotSearch slotFilter;
}

/**
 * Gets a listing of all public fireteams starting now with open slots. Caller is
 * not checked for join criteria so caching is maximized.
 */
  Future<ServerResponse<SearchResultOfFireteamSummary>> searchPublicAvailableClanFireteams(HttpClient http, SearchPublicAvailableClanFireteamsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Fireteam/Search/Available/${params.platform}/${params.activityType}/${params.dateRange}/${params.slotFilter}/${params.page}/",
    {
      'langFilter': params.langFilter
    },
    null
    ));
}

abstract class GetMyClanFireteamsParams {
  /**
   * If true, filter by clan. Otherwise, ignore the clan and show all of the user's
   * fireteams.
   */
  bool groupFilter;
  /**
   * The group id of the clan. (This parameter is ignored unless the optional query
   * parameter groupFilter is true).
   */
  String groupId;
  /** If true, return fireteams that have been closed. */
  bool includeClosed;
  /** An optional language filter. */
  String langFilter;
  /** Deprecated parameter, ignored. */
  int page;
  /** The platform filter. */
  FireteamPlatform platform;
}

/**
 * Gets a listing of all clan fireteams that caller is an applicant, a member, or
 * an alternate of.
 */
  Future<ServerResponse<SearchResultOfFireteamResponse>> getMyClanFireteams(HttpClient http, GetMyClanFireteamsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Fireteam/Clan/${params.groupId}/My/${params.platform}/${params.includeClosed}/${params.page}/",
    {
      'groupFilter': params.groupFilter,
      'langFilter': params.langFilter
    },
    null
    ));
}

abstract class GetClanFireteamParams {
  /** The unique id of the fireteam. */
  String fireteamId;
  /** The group id of the clan. */
  String groupId;
}

/** Gets a specific clan fireteam. */
  Future<ServerResponse<FireteamResponse>> getClanFireteam(HttpClient http, GetClanFireteamParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Fireteam/Clan/${params.groupId}/Summary/${params.fireteamId}/",
    null,
    null
    ));
}
