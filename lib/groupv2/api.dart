/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-dart code generator program.
 * https://github.com/marquesinijatinha/bungie-api-dart
 * Do not edit these files manually.
 */

import 'dart:async';
import '../http.dart';

import '../common.dart';
import './interfaces.dart';

/** Returns a list of all available group avatars for the signed-in user. */
  Future<ServerResponse<Map<int, String>>> getAvailableAvatars(HttpClient http) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/GetAvailableAvatars/",
    null,
    null
    ));
}

/** Returns a list of all available group themes. */
  Future<ServerResponse<List<GroupTheme>>> getAvailableThemes(HttpClient http) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/GetAvailableThemes/",
    null,
    null
    ));
}

abstract class GetUserClanInviteSettingParams {
  /** The Destiny membership type of the account we wish to access settings. */
  BungieMembershipType mType;
}

/**
 * Gets the state of the user's clan invite preferences for a particular membership
 * type - true if they wish to be invited to clans, false otherwise.
 */
  Future<ServerResponse<bool>> getUserClanInviteSetting(HttpClient http, GetUserClanInviteSettingParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/GetUserClanInviteSetting/${params.mType}/",
    null,
    null
    ));
}

abstract class SetUserClanInviteSettingParams {
  /** True to allow invites of this user to clans, false otherwise. */
  bool allowInvites;
  /** The Destiny membership type of linked account we are manipulating. */
  BungieMembershipType mType;
}

/**
 * Sets the state of the user's clan invite preferences - true if they wish to be
 * invited to clans, false otherwise.
 */
  Future<ServerResponse<int>> setUserClanInviteSetting(HttpClient http, SetUserClanInviteSettingParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/SetUserClanInviteSetting/${params.mType}/${params.allowInvites}/",
    null,
    null
    ));
}

abstract class GetRecommendedGroupsParams {
  /** Requested range in which to pull recommended groups */
  GroupDateRange createDateRange;
  /** Type of groups requested */
  GroupType groupType;
}

/**
 * Gets groups recommended for you based on the groups to whom those you follow
 * belong.
 */
  Future<ServerResponse<List<GroupV2Card>>> getRecommendedGroups(HttpClient http, GetRecommendedGroupsParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/Recommended/${params.groupType}/${params.createDateRange}/",
    null,
    null
    ));
}

/** Search for Groups. */
  Future<ServerResponse<GroupSearchResponse>> groupSearch(HttpClient http, GroupQuery body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/Search/",
    null,
    body
    ));
}

abstract class GetGroupParams {
  /** Requested group's id. */
  String groupId;
}

/** Get information about a specific group of the given ID. */
  Future<ServerResponse<GroupResponse>> getGroup(HttpClient http, GetGroupParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/",
    null,
    null
    ));
}

abstract class GetGroupByNameParams {
  /** Exact name of the group to find. */
  String groupName;
  /** Type of group to find. */
  GroupType groupType;
}

/** Get information about a specific group with the given name and type. */
  Future<ServerResponse<GroupResponse>> getGroupByName(HttpClient http, GetGroupByNameParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/Name/${params.groupName}/${params.groupType}/",
    null,
    null
    ));
}

abstract class GetGroupOptionalConversationsParams {
  /** Requested group's id. */
  String groupId;
}

/** Gets a list of available optional conversation channels and their settings. */
  Future<ServerResponse<List<GroupOptionalConversation>>> getGroupOptionalConversations(HttpClient http, GetGroupOptionalConversationsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/",
    null,
    null
    ));
}

/** Create a new group. */
  Future<ServerResponse<GroupCreationResponse>> createGroup(HttpClient http, GroupAction body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/Create/",
    null,
    body
    ));
}

abstract class EditGroupParams {
  /** Group ID of the group to edit. */
  String groupId;
}

/**
 * Edit an existing group. You must have suitable permissions in the group to
 * perform this operation. This latest revision will only edit the fields you pass
 * in - pass null for properties you want to leave unaltered.
 */
  Future<ServerResponse<int>> editGroup(HttpClient http, EditGroupParams params, GroupEditAction body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Edit/",
    null,
    body
    ));
}

abstract class EditClanBannerParams {
  /** Group ID of the group to edit. */
  String groupId;
}

/**
 * Edit an existing group's clan banner. You must have suitable permissions in the
 * group to perform this operation. All fields are required.
 */
  Future<ServerResponse<int>> editClanBanner(HttpClient http, EditClanBannerParams params, ClanBanner body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/EditClanBanner/",
    null,
    body
    ));
}

abstract class EditFounderOptionsParams {
  /** Group ID of the group to edit. */
  String groupId;
}

/**
 * Edit group options only available to a founder. You must have suitable
 * permissions in the group to perform this operation.
 */
  Future<ServerResponse<int>> editFounderOptions(HttpClient http, EditFounderOptionsParams params, GroupOptionsEditAction body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/EditFounderOptions/",
    null,
    body
    ));
}

abstract class AddOptionalConversationParams {
  /** Group ID of the group to edit. */
  String groupId;
}

/**
 * Add a new optional conversation/chat channel. Requires admin permissions to the
 * group.
 */
  Future<ServerResponse<String>> addOptionalConversation(HttpClient http, AddOptionalConversationParams params, GroupOptionalConversationAddRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/Add/",
    null,
    body
    ));
}

abstract class EditOptionalConversationParams {
  /** Conversation Id of the channel being edited. */
  String conversationId;
  /** Group ID of the group to edit. */
  String groupId;
}

/**
 * Edit the settings of an optional conversation/chat channel. Requires admin
 * permissions to the group.
 */
  Future<ServerResponse<String>> editOptionalConversation(HttpClient http, EditOptionalConversationParams params, GroupOptionalConversationEditRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/Edit/${params.conversationId}/",
    null,
    body
    ));
}

abstract class GetMembersOfGroupParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  int currentpage;
  /** The ID of the group. */
  String groupId;
  /** Filter out other member types. Use None for all members. */
  RuntimeGroupMemberType memberType;
  /**
   * The name fragment upon which a search should be executed for members with
   * matching display or unique names.
   */
  String nameSearch;
}

/** Get the list of members in a given group. */
  Future<ServerResponse<SearchResultOfGroupMember>> getMembersOfGroup(HttpClient http, GetMembersOfGroupParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/",
    {
      'memberType': params.memberType,
      'nameSearch': params.nameSearch
    },
    null
    ));
}

abstract class GetAdminsAndFounderOfGroupParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  int currentpage;
  /** The ID of the group. */
  String groupId;
}

/** Get the list of members in a given group who are of admin level or higher. */
  Future<ServerResponse<SearchResultOfGroupMember>> getAdminsAndFounderOfGroup(HttpClient http, GetAdminsAndFounderOfGroupParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/AdminsAndFounder/",
    null,
    null
    ));
}

abstract class EditGroupMembershipParams {
  /** ID of the group to which the member belongs. */
  String groupId;
  /** Membership ID to modify. */
  String membershipId;
  /** Membership type of the provide membership ID. */
  BungieMembershipType membershipType;
  /** New membertype for the specified member. */
  RuntimeGroupMemberType memberType;
}

/**
 * Edit the membership type of a given member. You must have suitable permissions
 * in the group to perform this operation.
 */
  Future<ServerResponse<int>> editGroupMembership(HttpClient http, EditGroupMembershipParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/SetMembershipType/${params.memberType}/",
    null,
    null
    ));
}

abstract class KickMemberParams {
  /** Group ID to kick the user from. */
  String groupId;
  /** Membership ID to kick. */
  String membershipId;
  /** Membership type of the provided membership ID. */
  BungieMembershipType membershipType;
}

/**
 * Kick a member from the given group, forcing them to reapply if they wish to re-
 * join the group. You must have suitable permissions in the group to perform this
 * operation.
 */
  Future<ServerResponse<GroupMemberLeaveResult>> kickMember(HttpClient http, KickMemberParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Kick/",
    null,
    null
    ));
}

abstract class BanMemberParams {
  /** Group ID that has the member to ban. */
  String groupId;
  /** Membership ID of the member to ban from the group. */
  String membershipId;
  /** Membership type of the provided membership ID. */
  BungieMembershipType membershipType;
}

/**
 * Bans the requested member from the requested group for the specified period of
 * time.
 */
  Future<ServerResponse<int>> banMember(HttpClient http, BanMemberParams params, GroupBanRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Ban/",
    null,
    body
    ));
}

abstract class UnbanMemberParams {
  String groupId;
  /** Membership ID of the member to unban from the group */
  String membershipId;
  /** Membership type of the provided membership ID. */
  BungieMembershipType membershipType;
}

/** Unbans the requested member, allowing them to re-apply for membership. */
  Future<ServerResponse<int>> unbanMember(HttpClient http, UnbanMemberParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Unban/",
    null,
    null
    ));
}

abstract class GetBannedMembersOfGroupParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 entries. */
  int currentpage;
  /** Group ID whose banned members you are fetching */
  String groupId;
}

/**
 * Get the list of banned members in a given group. Only accessible to group Admins
 * and above. Not applicable to all groups. Check group features.
 */
  Future<ServerResponse<SearchResultOfGroupBan>> getBannedMembersOfGroup(HttpClient http, GetBannedMembersOfGroupParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Banned/",
    null,
    null
    ));
}

abstract class AbdicateFoundershipParams {
  /** The new founder for this group. Must already be a group admin. */
  String founderIdNew;
  /** The target group id. */
  String groupId;
  /** Membership type of the provided founderIdNew. */
  BungieMembershipType membershipType;
}

/**
 * An administrative method to allow the founder of a group or clan to give up
 * their position to another admin permanently.
 */
  Future<ServerResponse<bool>> abdicateFoundership(HttpClient http, AbdicateFoundershipParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Admin/AbdicateFoundership/${params.membershipType}/${params.founderIdNew}/",
    null,
    null
    ));
}

abstract class RequestGroupMembershipParams {
  /** ID of the group you would like to join. */
  String groupId;
  /** MembershipType of the account to use when joining. */
  BungieMembershipType membershipType;
}

/** Request permission to join the given group. */
  Future<ServerResponse<GroupApplicationResponse>> requestGroupMembership(HttpClient http, RequestGroupMembershipParams params, GroupApplicationRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Apply/${params.membershipType}/",
    null,
    body
    ));
}

abstract class GetPendingMembershipsParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  int currentpage;
  /** ID of the group. */
  String groupId;
}

/**
 * Get the list of users who are awaiting a decision on their application to join a
 * given group. Modified to include application info.
 */
  Future<ServerResponse<SearchResultOfGroupMemberApplication>> getPendingMemberships(HttpClient http, GetPendingMembershipsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Pending/",
    null,
    null
    ));
}

abstract class GetInvitedIndividualsParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  int currentpage;
  /** ID of the group. */
  String groupId;
}

/** Get the list of users who have been invited into the group. */
  Future<ServerResponse<SearchResultOfGroupMemberApplication>> getInvitedIndividuals(HttpClient http, GetInvitedIndividualsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/InvitedIndividuals/",
    null,
    null
    ));
}

abstract class RescindGroupMembershipParams {
  /** ID of the group. */
  String groupId;
  /** MembershipType of the account to leave. */
  BungieMembershipType membershipType;
}

/**
 * Rescind your application to join the given group or leave the group if you are
 * already a member..
 */
  Future<ServerResponse<GroupMemberLeaveResult>> rescindGroupMembership(HttpClient http, RescindGroupMembershipParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Rescind/${params.membershipType}/",
    null,
    null
    ));
}

abstract class ApproveAllPendingParams {
  /** ID of the group. */
  String groupId;
}

/** Approve all of the pending users for the given group. */
  Future<ServerResponse<List<EntityActionResult>>> approveAllPending(HttpClient http, ApproveAllPendingParams params, GroupApplicationRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/ApproveAll/",
    null,
    body
    ));
}

abstract class DenyAllPendingParams {
  /** ID of the group. */
  String groupId;
}

/** Deny all of the pending users for the given group. */
  Future<ServerResponse<List<EntityActionResult>>> denyAllPending(HttpClient http, DenyAllPendingParams params, GroupApplicationRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/DenyAll/",
    null,
    body
    ));
}

abstract class ApprovePendingForListParams {
  /** ID of the group. */
  String groupId;
}

/** Approve all of the pending users for the given group. */
  Future<ServerResponse<List<EntityActionResult>>> approvePendingForList(HttpClient http, ApprovePendingForListParams params, GroupApplicationListRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/ApproveList/",
    null,
    body
    ));
}

abstract class ApprovePendingParams {
  /** ID of the group. */
  String groupId;
  /** The membership id being approved. */
  String membershipId;
  /** Membership type of the supplied membership ID. */
  BungieMembershipType membershipType;
}

/**
 * Approve the given membershipId to join the group/clan as long as they have
 * applied.
 */
  Future<ServerResponse<bool>> approvePending(HttpClient http, ApprovePendingParams params, GroupApplicationRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Approve/${params.membershipType}/${params.membershipId}/",
    null,
    body
    ));
}

abstract class DenyPendingForListParams {
  /** ID of the group. */
  String groupId;
}

/** Deny all of the pending users for the given group that match the passed-in . */
  Future<ServerResponse<List<EntityActionResult>>> denyPendingForList(HttpClient http, DenyPendingForListParams params, GroupApplicationListRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/DenyList/",
    null,
    body
    ));
}

abstract class GetGroupsForMemberParams {
  /** Filter apply to list of joined groups. */
  GroupsForMemberFilter filter;
  /** Type of group the supplied member founded. */
  GroupType groupType;
  /** Membership ID to for which to find founded groups. */
  String membershipId;
  /** Membership type of the supplied membership ID. */
  BungieMembershipType membershipType;
}

/** Get information about the groups that a given member has joined. */
  Future<ServerResponse<GroupMembershipSearchResponse>> getGroupsForMember(HttpClient http, GetGroupsForMemberParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/User/${params.membershipType}/${params.membershipId}/${params.filter}/${params.groupType}/",
    null,
    null
    ));
}

abstract class GetPotentialGroupsForMemberParams {
  /** Filter apply to list of potential joined groups. */
  GroupPotentialMemberStatus filter;
  /** Type of group the supplied member applied. */
  GroupType groupType;
  /** Membership ID to for which to find applied groups. */
  String membershipId;
  /** Membership type of the supplied membership ID. */
  BungieMembershipType membershipType;
}

/**
 * Get information about the groups that a given member has applied to or been
 * invited to.
 */
  Future<ServerResponse<GroupPotentialMembershipSearchResponse>> getPotentialGroupsForMember(HttpClient http, GetPotentialGroupsForMemberParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/GroupV2/User/Potential/${params.membershipType}/${params.membershipId}/${params.filter}/${params.groupType}/",
    null,
    null
    ));
}

abstract class IndividualGroupInviteParams {
  /** ID of the group you would like to join. */
  String groupId;
  /** Membership id of the account being invited. */
  String membershipId;
  /** MembershipType of the account being invited. */
  BungieMembershipType membershipType;
}

/** Invite a user to join this group. */
  Future<ServerResponse<GroupApplicationResponse>> individualGroupInvite(HttpClient http, IndividualGroupInviteParams params, GroupApplicationRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/IndividualInvite/${params.membershipType}/${params.membershipId}/",
    null,
    body
    ));
}

abstract class IndividualGroupInviteCancelParams {
  /** ID of the group you would like to join. */
  String groupId;
  /** Membership id of the account being cancelled. */
  String membershipId;
  /** MembershipType of the account being cancelled. */
  BungieMembershipType membershipType;
}

/** Cancels a pending invitation to join a group. */
  Future<ServerResponse<GroupApplicationResponse>> individualGroupInviteCancel(HttpClient http, IndividualGroupInviteCancelParams params) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/IndividualInviteCancel/${params.membershipType}/${params.membershipId}/",
    null,
    null
    ));
}
