/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-dart code generator program.
 * https://github.com/marquesinijatinha/bungie-api-dart
 * Do not edit these files manually.
 */

import '../common.dart';
import '../destiny2/interfaces.dart';
import '../user/interfaces.dart';

class GroupResponse {
  GroupV2 detail;
  GroupMember founder;
  List<String> alliedIds;
  GroupV2 parentGroup;
  GroupAllianceStatus allianceStatus;
  int groupJoinInviteCount;
  /**
   * This property will be populated if the authenticated user is a member of the
   * group. Note that because of account linking, a user can sometimes be part of a
   * clan more than once. As such, this returns the highest member type available.
   */
  Map<int, GroupMember> currentUserMemberMap;
  /**
   * This property will be populated if the authenticated user is an applicant or has
   * an outstanding invitation to join. Note that because of account linking, a user
   * can sometimes be part of a clan more than once.
   */
  Map<int, GroupPotentialMember> currentUserPotentialMemberMap;
}

class GroupV2 {
  String groupId;
  String name;
  GroupType groupType;
  String membershipIdCreated;
  String creationDate;
  String modificationDate;
  String about;
  List<String> tags;
  int memberCount;
  bool isPublic;
  bool isPublicTopicAdminOnly;
  String motto;
  bool allowChat;
  bool isDefaultPostPublic;
  ChatSecuritySetting chatSecurity;
  String locale;
  int avatarImageIndex;
  GroupHomepage homepage;
  MembershipOption membershipOption;
  GroupPostPublicity defaultPublicity;
  String theme;
  String bannerPath;
  String avatarPath;
  String conversationId;
  bool enableInvitationMessagingForAdmins;
  String banExpireDate;
  GroupFeatures features;
  GroupV2ClanInfoAndInvestment clanInfo;
}

class GroupType {
   static const int General = 0;
   static const int Clan = 1;
}

class ChatSecuritySetting {
   static const int Group = 0;
   static const int Admins = 1;
}

class GroupHomepage {
   static const int Wall = 0;
   static const int Forum = 1;
   static const int AllianceForum = 2;
}

class MembershipOption {
   static const int Reviewed = 0;
   static const int Open = 1;
   static const int Closed = 2;
}

class GroupPostPublicity {
   static const int Public = 0;
   static const int Alliance = 1;
   static const int Private = 2;
}

class GroupFeatures {
  int maximumMembers;
  /**
   * Maximum number of groups of this type a typical membership may join. For example,
   * a user may join about 50 General groups with their Bungie.net account. They may
   * join one clan per Destiny membership.
   */
  int maximumMembershipsOfGroupType;
  Capabilities capabilities;
  List<BungieMembershipType> membershipTypes;
  /**
   * Minimum Member Level allowed to invite new members to group
   *
   * Always Allowed: Founder, Acting Founder
   *
   * True means admins have this power, false means they don't
   *
   * Default is false for clans, true for groups.
   */
  bool invitePermissionOverride;
  /**
   * Minimum Member Level allowed to update group culture
   *
   * Always Allowed: Founder, Acting Founder
   *
   * True means admins have this power, false means they don't
   *
   * Default is false for clans, true for groups.
   */
  bool updateCulturePermissionOverride;
  /**
   * Minimum Member Level allowed to host guided games
   *
   * Always Allowed: Founder, Acting Founder, Admin
   *
   * Allowed Overrides: None, Member, Beginner
   *
   * Default is Member for clans, None for groups, although this means nothing for
   * groups.
   */
  int hostGuidedGamePermissionOverride;
  /**
   * Minimum Member Level allowed to update banner
   *
   * Always Allowed: Founder, Acting Founder
   *
   * True means admins have this power, false means they don't
   *
   * Default is false for clans, true for groups.
   */
  bool updateBannerPermissionOverride;
  /**
   * Level to join a member at when accepting an invite, application, or joining an
   * open clan
   *
   * Default is Beginner.
   */
  int joinLevel;
}

class Capabilities {
   static const int None = 0;
   static const int Leaderboards = 1;
   static const int Callsign = 2;
   static const int OptionalConversations = 4;
   static const int ClanBanner = 8;
   static const int D2InvestmentData = 16;
   static const int Tags = 32;
   static const int Alliances = 64;
}

class HostGuidedGamesPermissionLevel {
   static const int None = 0;
   static const int Beginner = 1;
   static const int Member = 2;
}

class RuntimeGroupMemberType {
   static const int None = 0;
   static const int Beginner = 1;
   static const int Member = 2;
   static const int Admin = 3;
   static const int ActingFounder = 4;
   static const int Founder = 5;
}

/** The same as GroupV2ClanInfo, but includes any investment data. */
class GroupV2ClanInfoAndInvestment {
  Map<int, DestinyProgression> d2ClanProgressions;
  String clanCallsign;
  ClanBanner clanBannerData;
}

class ClanBanner {
  int decalId;
  int decalColorId;
  int decalBackgroundColorId;
  int gonfalonId;
  int gonfalonColorId;
  int gonfalonDetailId;
  int gonfalonDetailColorId;
}

class GroupMember {
  RuntimeGroupMemberType memberType;
  bool isOnline;
  String groupId;
  UserInfoCard destinyUserInfo;
  UserInfoCard bungieNetUserInfo;
  String joinDate;
}

class GroupAllianceStatus {
   static const int Unallied = 0;
   static const int Parent = 1;
   static const int Child = 2;
}

class GroupPotentialMember {
  GroupPotentialMemberStatus potentialStatus;
  String groupId;
  UserInfoCard destinyUserInfo;
  UserInfoCard bungieNetUserInfo;
  String joinDate;
}

class GroupPotentialMemberStatus {
   static const int None = 0;
   static const int Applicant = 1;
   static const int Invitee = 2;
}

class GroupDateRange {
   static const int All = 0;
   static const int PastDay = 1;
   static const int PastWeek = 2;
   static const int PastMonth = 3;
   static const int PastYear = 4;
}

/**
 * NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and
 * incompatible "modes".
 *
 * If you are querying for a group, you can pass any of the properties below.
 *
 * If you are querying for a Clan, you MUST NOT pass any of the following
 * properties (they must be null or undefined in your request, not just empty
 * string/default values):
 *
 * - groupMemberCountFilter - localeFilter - tagText
 *
 * If you pass these, you will get a useless InvalidParameters error.
 */
class GroupQuery {
  String name;
  GroupType groupType;
  GroupDateRange creationDate;
  GroupSortBy sortBy;
  int groupMemberCountFilter;
  String localeFilter;
  String tagText;
  int itemsPerPage;
  int currentPage;
  String requestContinuationToken;
}

class GroupAction {
  /** Type of group, either Bungie.net hosted group, or a game services hosted clan. */
  int groupType;
  String name;
  String about;
  String motto;
  String theme;
  int avatarImageIndex;
  String tags;
  bool isPublic;
  MembershipOption membershipOption;
  bool isPublicTopicAdminOnly;
  bool isDefaultPostPublic;
  bool allowChat;
  bool isDefaultPostAlliance;
  ChatSecuritySetting chatSecurity;
  String callsign;
  String locale;
  GroupHomepage homepage;
  /**
   * When operation needs a platform specific account ID for the present user, use
   * this property. In particular, groupType of Clan requires this value to be set.
   */
  int platformMembershipType;
}

class GroupEditAction {
  String name;
  String about;
  String motto;
  String theme;
  int avatarImageIndex;
  String tags;
  bool isPublic;
  int membershipOption;
  bool isPublicTopicAdminOnly;
  bool allowChat;
  int chatSecurity;
  String callsign;
  String locale;
  int homepage;
  bool enableInvitationMessagingForAdmins;
  int defaultPublicity;
}

class GroupOptionsEditAction {
  /**
   * Minimum Member Level allowed to invite new members to group
   *
   * Always Allowed: Founder, Acting Founder
   *
   * True means admins have this power, false means they don't
   *
   * Default is false for clans, true for groups.
   */
  bool InvitePermissionOverride;
  /**
   * Minimum Member Level allowed to update group culture
   *
   * Always Allowed: Founder, Acting Founder
   *
   * True means admins have this power, false means they don't
   *
   * Default is false for clans, true for groups.
   */
  bool UpdateCulturePermissionOverride;
  /**
   * Minimum Member Level allowed to host guided games
   *
   * Always Allowed: Founder, Acting Founder, Admin
   *
   * Allowed Overrides: None, Member, Beginner
   *
   * Default is Member for clans, None for groups, although this means nothing for
   * groups.
   */
  int HostGuidedGamePermissionOverride;
  /**
   * Minimum Member Level allowed to update banner
   *
   * Always Allowed: Founder, Acting Founder
   *
   * True means admins have this power, false means they don't
   *
   * Default is false for clans, true for groups.
   */
  bool UpdateBannerPermissionOverride;
  /**
   * Level to join a member at when accepting an invite, application, or joining an
   * open clan
   *
   * Default is Beginner.
   */
  int JoinLevel;
}

class GroupOptionalConversationAddRequest {
  String chatName;
  ChatSecuritySetting chatSecurity;
}

class GroupOptionalConversationEditRequest {
  bool chatEnabled;
  String chatName;
  int chatSecurity;
}

class GroupBanRequest {
  String comment;
  IgnoreLength length;
}

class GroupApplicationRequest {
  String message;
}

class GroupApplicationListRequest {
  List<UserMembership> memberships;
  String message;
}

class GroupsForMemberFilter {
   static const int All = 0;
   static const int Founded = 1;
   static const int NonFounded = 2;
}

class GroupTheme {
  String name;
  String folder;
  String description;
}

/**
 * A small infocard of group information, usually used for when a list of groups
 * are returned
 */
class GroupV2Card {
  String groupId;
  String name;
  GroupType groupType;
  String creationDate;
  String about;
  String motto;
  int memberCount;
  String locale;
  MembershipOption membershipOption;
  Capabilities capabilities;
  GroupV2ClanInfo clanInfo;
  String avatarPath;
  String theme;
}

/**
 * This contract contains clan-specific group information. It does not include any
 * investment data.
 */
class GroupV2ClanInfo {
  String clanCallsign;
  ClanBanner clanBannerData;
}

class GroupSortBy {
   static const int Name = 0;
   static const int Date = 1;
   static const int Popularity = 2;
   static const int Id = 3;
}

class GroupSearchResponse {
  List<GroupV2Card> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class GroupOptionalConversation {
  String groupId;
  String conversationId;
  bool chatEnabled;
  String chatName;
  ChatSecuritySetting chatSecurity;
}

class GroupCreationResponse {
  String groupId;
}

class SearchResultOfGroupMember {
  List<GroupMember> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class GroupMemberLeaveResult {
  GroupV2 group;
  bool groupDeleted;
}

class IgnoreLength {
   static const int None = 0;
   static const int Week = 1;
   static const int TwoWeeks = 2;
   static const int ThreeWeeks = 3;
   static const int Month = 4;
   static const int ThreeMonths = 5;
   static const int SixMonths = 6;
   static const int Year = 7;
   static const int Forever = 8;
   static const int ThreeMinutes = 9;
   static const int Hour = 10;
   static const int ThirtyDays = 11;
}

class SearchResultOfGroupBan {
  List<GroupBan> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class GroupBan {
  String groupId;
  UserInfoCard lastModifiedBy;
  UserInfoCard createdBy;
  String dateBanned;
  String dateExpires;
  String comment;
  UserInfoCard bungieNetUserInfo;
  UserInfoCard destinyUserInfo;
}

class GroupApplicationResponse {
  GroupApplicationResolveState resolution;
}

class GroupApplicationResolveState {
   static const int Unresolved = 0;
   static const int Accepted = 1;
   static const int Denied = 2;
   static const int Rescinded = 3;
}

class SearchResultOfGroupMemberApplication {
  List<GroupMemberApplication> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class GroupMemberApplication {
  String groupId;
  String creationDate;
  GroupApplicationResolveState resolveState;
  String resolveDate;
  String resolvedByMembershipId;
  String requestMessage;
  String resolveMessage;
  UserInfoCard destinyUserInfo;
  UserInfoCard bungieNetUserInfo;
}

class EntityActionResult {
  String entityId;
  PlatformErrorCodes result;
}

class GroupMembershipSearchResponse {
  List<GroupMembership> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class GroupMembership {
  GroupMember member;
  GroupV2 group;
}

class GroupPotentialMembershipSearchResponse {
  List<GroupPotentialMembership> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

class GroupPotentialMembership {
  GroupPotentialMember member;
  GroupV2 group;
}
