/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-dart code generator program.
 * https://github.com/marquesinijatinha/bungie-api-dart
 * Do not edit these files manually.
 */

import '../common.dart';
import '../content/interfaces.dart';
import '../destiny2/interfaces.dart';
import '../platform.dart';

class TrendingEntryType {
   static const int News = 0;
   static const int DestinyItem = 1;
   static const int DestinyActivity = 2;
   static const int DestinyRitual = 3;
   static const int SupportArticle = 4;
   static const int Creation = 5;
   static const int Stream = 6;
   static const int Update = 7;
   static const int Link = 8;
   static const int ForumTag = 9;
   static const int Container = 10;
   static const int Release = 11;
}

class TrendingCategories {
  List<TrendingCategory> categories;
}

class TrendingCategory {
  String categoryName;
  SearchResultOfTrendingEntry entries;
  String categoryId;
}

class SearchResultOfTrendingEntry {
  List<TrendingEntry> results;
  int totalResults;
  bool hasMore;
  PagedQuery query;
  String replacementContinuationToken;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   *
   * If False, it does not, and may be estimated/only the size of the current page.
   *
   * Either way, you should probably always only trust hasMore.
   *
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  bool useTotalResults;
}

/**
 * The list entry view for trending items. Returns just enough to show the item on
 * the trending page.
 */
class TrendingEntry {
  /** The weighted score of this trending item. */
  double weight;
  bool isFeatured;
  /**
   * We don't know whether the identifier will be a string, a uint, or a long... so
   * we're going to cast it all to a string. But either way, we need any trending
   * item created to have a single unique identifier for its type.
   */
  String identifier;
  /**
   * An enum - unfortunately - dictating all of the possible kinds of trending items
   * that you might get in your result set, in case you want to do custom rendering
   * or call to get the details of the item.
   */
  int entityType;
  /**
   * The localized "display name/article title/'primary localized identifier'" of the
   * entity.
   */
  String displayName;
  /**
   * If the entity has a localized tagline/subtitle/motto/whatever, that is found
   * here.
   */
  String tagline;
  String image;
  String startDate;
  String endDate;
  String link;
  /**
   * If this is populated, the entry has a related WebM video to show. I am 100%
   * certain I am going to regret putting this directly on TrendingEntry, but it will
   * work so yolo
   */
  String webmVideo;
  /**
   * If this is populated, the entry has a related MP4 video to show. I am 100%
   * certain I am going to regret putting this directly on TrendingEntry, but it will
   * work so yolo
   */
  String mp4Video;
  /**
   * If isFeatured, this image will be populated with whatever the featured image is.
   * Note that this will likely be a very large image, so don't use it all the time.
   */
  String featureImage;
  /**
   * If the item is of entityType TrendingEntryType.Container, it may have items -
   * also Trending Entries - contained within it. This is the ordered list of those
   * to display under the Container's header.
   */
  List<TrendingEntry> items;
  /** If the entry has a date at which it was created, this is that date. */
  String creationDate;
}

class TrendingDetail {
  String identifier;
  TrendingEntryType entityType;
  TrendingEntryNews news;
  TrendingEntrySupportArticle support;
  TrendingEntryDestinyItem destinyItem;
  TrendingEntryDestinyActivity destinyActivity;
  TrendingEntryDestinyRitual destinyRitual;
  TrendingEntryCommunityCreation creation;
  TrendingEntryCommunityStream stream;
}

class TrendingEntryNews {
  ContentItemPublicContract article;
}

class TrendingEntrySupportArticle {
  ContentItemPublicContract article;
}

class TrendingEntryDestinyItem {
  int itemHash;
}

class TrendingEntryDestinyActivity {
  int activityHash;
  DestinyPublicActivityStatus status;
}

class TrendingEntryDestinyRitual {
  String image;
  String icon;
  String title;
  String subtitle;
  String dateStart;
  String dateEnd;
  /**
   * A destiny event does not necessarily have a related Milestone, but if it does
   * the details will be returned here.
   */
  int milestoneDetails;
  /**
   * A destiny event will not necessarily have milestone "custom content", but if it
   * does the details will be here.
   */
  int eventContent;
}

class TrendingEntryCommunityCreation {
  String media;
  String title;
  String author;
  String authorMembershipId;
  String postId;
  String body;
  int upvotes;
}

class TrendingEntryCommunityStream {
  String image;
  String title;
  String partnershipIdentifier;
  PartnershipType partnershipType;
}
