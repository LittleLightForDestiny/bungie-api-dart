/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-dart code generator program.
 * https://github.com/marquesinijatinha/bungie-api-dart
 * Do not edit these files manually.
 */

import 'dart:async';
import '../http.dart';

import '../common.dart';
import '../user/interfaces.dart';
import './interfaces.dart';

/** Returns the current version of the manifest as a json object. */
  Future<ServerResponse<DestinyManifest>> getDestinyManifest(HttpClient http) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Manifest/",
    null,
    null
    ));
}

abstract class GetDestinyEntityDefinitionParams {
  /**
   * The type of entity for whom you would like results. These correspond to the
   * entity's definition contract name. For instance, if you are looking for items,
   * this property should be 'DestinyInventoryItemDefinition'. PREVIEW: This endpoint
   * is still in beta, and may experience rough edges. The schema is tentatively in
   * final form, but there may be bugs that prevent desirable operation.
   */
  String entityType;
  /** The hash identifier for the specific Entity you want returned. */
  int hashIdentifier;
}

/**
 * Returns the static definition of an entity of the given Type and hash identifier.
 * Examine the API Documentation for the Type Names of entities that have their
 * own definitions. Note that the return type will always *inherit from*
 * DestinyDefinition, but the specific type returned will be the requested entity
 * type if it can be found. Please don't use this as a chatty alternative to the
 * Manifest database if you require large sets of data, but for simple and one-off
 * accesses this should be handy.
 */
  Future<ServerResponse<DestinyDefinition>> getDestinyEntityDefinition(HttpClient http, GetDestinyEntityDefinitionParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Manifest/${params.entityType}/${params.hashIdentifier}/",
    null,
    null
    ));
}

abstract class SearchDestinyPlayerParams {
  /** The full gamertag or PSN id of the player. Spaces and case are ignored. */
  String displayName;
  /** A valid non-BungieNet membership type, or All. */
  BungieMembershipType membershipType;
}

/** Returns a list of Destiny memberships given a full Gamertag or PSN ID. */
  Future<ServerResponse<List<UserInfoCard>>> searchDestinyPlayer(HttpClient http, SearchDestinyPlayerParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/SearchDestinyPlayer/${params.membershipType}/${params.displayName}/",
    null,
    null
    ));
}

abstract class GetLinkedProfilesParams {
  /**
   * The ID of the membership whose linked Destiny accounts you want returned. Make
   * sure your membership ID matches its Membership Type: don't pass us a PSN
   * membership ID and the XBox membership type, it's not going to work!
   */
  String membershipId;
  /** The type for the membership whose linked Destiny accounts you want returned. */
  BungieMembershipType membershipType;
}

/**
 * Returns a summary information about all profiles linked to the requesting
 * membership type/membership ID that have valid Destiny information. The passed-in
 * Membership Type/Membership ID may be a Bungie.Net membership or a Destiny
 * membership. It only returns the minimal amount of data to begin making more
 * substantive requests, but will hopefully serve as a useful alternative to
 * UserServices for people who just care about Destiny data. Note that it will only
 * return linked accounts whose linkages you are allowed to view.
 */
  Future<ServerResponse<DestinyLinkedProfilesResponse>> getLinkedProfiles(HttpClient http, GetLinkedProfilesParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.membershipId}/LinkedProfiles/",
    null,
    null
    ));
}

abstract class GetProfileParams {
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  List<DestinyComponentType> components;
  /** Destiny membership ID. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/** Returns Destiny Profile information for the supplied membership. */
  Future<ServerResponse<DestinyProfileResponse>> getProfile(HttpClient http, GetProfileParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/",
    {
      'components': params.components
    },
    null
    ));
}

abstract class GetCharacterParams {
  /** ID of the character. */
  String characterId;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  List<DestinyComponentType> components;
  /** Destiny membership ID. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/** Returns character information for the supplied character. */
  Future<ServerResponse<DestinyCharacterResponse>> getCharacter(HttpClient http, GetCharacterParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Character/${params.characterId}/",
    {
      'components': params.components
    },
    null
    ));
}

abstract class GetClanWeeklyRewardStateParams {
  /** A valid group id of clan. */
  String groupId;
}

/**
 * Returns information on the weekly clan rewards and if the clan has earned them
 * or not. Note that this will always report rewards as not redeemed.
 */
  Future<ServerResponse<DestinyMilestone>> getClanWeeklyRewardState(HttpClient http, GetClanWeeklyRewardStateParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Clan/${params.groupId}/WeeklyRewardState/",
    null,
    null
    ));
}

abstract class GetItemParams {
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  List<DestinyComponentType> components;
  /** The membership ID of the destiny profile. */
  String destinyMembershipId;
  /** The Instance ID of the destiny item. */
  String itemInstanceId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/**
 * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is
 * one with an ItemInstanceId. Non-instanced items, such as materials, have no
 * useful instance-specific details and thus are not queryable here.
 */
  Future<ServerResponse<DestinyItemResponse>> getItem(HttpClient http, GetItemParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Item/${params.itemInstanceId}/",
    {
      'components': params.components
    },
    null
    ));
}

abstract class GetVendorsParams {
  /** The Destiny Character ID of the character for whom we're getting vendor info. */
  String characterId;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  List<DestinyComponentType> components;
  /** Destiny membership ID of another user. You may be denied. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/**
 * Get currently available vendors from the list of vendors that can possibly have
 * rotating inventory. Note that this does not include things like preview vendors
 * and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use
 * their definitions as-is for those.
 */
  Future<ServerResponse<DestinyVendorsResponse>> getVendors(HttpClient http, GetVendorsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Character/${params.characterId}/Vendors/",
    {
      'components': params.components
    },
    null
    ));
}

abstract class GetVendorParams {
  /** The Destiny Character ID of the character for whom we're getting vendor info. */
  String characterId;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  List<DestinyComponentType> components;
  /** Destiny membership ID of another user. You may be denied. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
  /** The Hash identifier of the Vendor to be returned. */
  int vendorHash;
}

/** Get the details of a specific Vendor. */
  Future<ServerResponse<DestinyVendorResponse>> getVendor(HttpClient http, GetVendorParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Character/${params.characterId}/Vendors/${params.vendorHash}/",
    {
      'components': params.components
    },
    null
    ));
}

abstract class GetCollectibleNodeDetailsParams {
  /**
   * The Destiny Character ID of the character for whom we're getting collectible
   * detail info.
   */
  String characterId;
  /**
   * The hash identifier of the Presentation Node for whom we should return
   * collectible details. Details will only be returned for collectibles that are
   * direct descendants of this node.
   */
  int collectiblePresentationNodeHash;
  /**
   * A comma separated list of components to return (as strings or numeric values).
   * See the DestinyComponentType enum for valid components to request. You must
   * request at least one component to receive results.
   */
  List<DestinyComponentType> components;
  /** Destiny membership ID of another user. You may be denied. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/**
 * Given a Presentation Node that has Collectibles as direct descendants, this will
 * return item details about those descendants in the context of the requesting
 * character.
 */
  Future<ServerResponse<DestinyCollectibleNodeDetailResponse>> getCollectibleNodeDetails(HttpClient http, GetCollectibleNodeDetailsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Character/${params.characterId}/Collectibles/${params.collectiblePresentationNodeHash}/",
    {
      'components': params.components
    },
    null
    ));
}

/**
 * Transfer an item to/from your vault. You must have a valid Destiny account. You
 * must also pass BOTH a reference AND an instance ID if it's an instanced item.
 * itshappening.gif
 */
  Future<ServerResponse<int>> transferItem(HttpClient http, DestinyItemTransferRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Actions/Items/TransferItem/",
    null,
    body
    ));
}

/**
 * Extract an item from the Postmaster, with whatever implications that may entail.
 * You must have a valid Destiny account. You must also pass BOTH a reference AND
 * an instance ID if it's an instanced item.
 */
  Future<ServerResponse<int>> pullFromPostmaster(HttpClient http, DestinyPostmasterTransferRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Actions/Items/PullFromPostmaster/",
    null,
    body
    ));
}

/**
 * Equip an item. You must have a valid Destiny Account, and either be in a social
 * space, in orbit, or offline.
 */
  Future<ServerResponse<int>> equipItem(HttpClient http, DestinyItemActionRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Actions/Items/EquipItem/",
    null,
    body
    ));
}

/**
 * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account,
 * and either be in a social space, in orbit, or offline. Any items not found on
 * your character will be ignored.
 */
  Future<ServerResponse<DestinyEquipItemResults>> equipItems(HttpClient http, DestinyItemSetActionRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Actions/Items/EquipItems/",
    null,
    body
    ));
}

/** Set the Lock State for an instanced item. You must have a valid Destiny Account. */
  Future<ServerResponse<int>> setItemLockState(HttpClient http, DestinyItemStateRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Actions/Items/SetLockState/",
    null,
    body
    ));
}

/**
 * Insert a plug into a socketed item. I know how it sounds, but I assure you it's
 * much more G-rated than you might be guessing. We haven't decided yet whether
 * this will be able to insert plugs that have side effects, but if we do it will
 * require special scope permission for an application attempting to do so. You
 * must have a valid Destiny Account, and either be in a social space, in orbit, or
 * offline. Request must include proof of permission for 'InsertPlugs' from the
 * account owner.
 */
  Future<ServerResponse<DestinyItemChangeResponse>> insertSocketPlug(HttpClient http, DestinyInsertPlugsActionRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Actions/Items/InsertSocketPlug/",
    null,
    body
    ));
}

abstract class GetPostGameCarnageReportParams {
  /** The ID of the activity whose PGCR is requested. */
  String activityId;
}

/** Gets the available post game carnage report for the activity ID. */
  Future<ServerResponse<DestinyPostGameCarnageReportData>> getPostGameCarnageReport(HttpClient http, GetPostGameCarnageReportParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Stats/PostGameCarnageReport/${params.activityId}/",
    null,
    null
    ));
}

abstract class ReportOffensivePostGameCarnageReportPlayerParams {
  /** The ID of the activity where you ran into the brigand that you're reporting. */
  String activityId;
}

/**
 * Report a player that you met in an activity that was engaging in ToS-violating
 * activities. Both you and the offending player must have played in the activityId
 * passed in. Please use this judiciously and only when you have strong suspicions
 * of violation, pretty please.
 */
  Future<ServerResponse<int>> reportOffensivePostGameCarnageReportPlayer(HttpClient http, ReportOffensivePostGameCarnageReportPlayerParams params, DestinyReportOffensePgcrRequest body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Stats/PostGameCarnageReport/${params.activityId}/Report/",
    null,
    body
    ));
}

/** Gets historical stats definitions. */
  Future<ServerResponse<Map<String, DestinyHistoricalStatsDefinition>>> getHistoricalStatsDefinition(HttpClient http) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Stats/Definition/",
    null,
    null
    ));
}

abstract class GetClanLeaderboardsParams {
  /** Group ID of the clan whose leaderboards you wish to fetch. */
  String groupId;
  /**
   * Maximum number of top players to return. Use a large number to get entire
   * leaderboard.
   */
  int maxtop;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  String modes;
  /** ID of stat to return rather than returning all Leaderboard stats. */
  String statid;
}

/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and
 * may experience rough edges. The schema is in final form, but there may be bugs
 * that prevent desirable operation.
 */
  Future<ServerResponse<Map<String, Map<String, DestinyLeaderboard>>>> getClanLeaderboards(HttpClient http, GetClanLeaderboardsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Stats/Leaderboards/Clans/${params.groupId}/",
    {
      'maxtop': params.maxtop,
      'modes': params.modes,
      'statid': params.statid
    },
    null
    ));
}

abstract class GetClanAggregateStatsParams {
  /** Group ID of the clan whose leaderboards you wish to fetch. */
  String groupId;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  String modes;
}

/**
 * Gets aggregated stats for a clan using the same categories as the clan
 * leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough
 * edges. The schema is in final form, but there may be bugs that prevent desirable
 * operation.
 */
  Future<ServerResponse<List<DestinyClanAggregateStat>>> getClanAggregateStats(HttpClient http, GetClanAggregateStatsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Stats/AggregateClanStats/${params.groupId}/",
    {
      'modes': params.modes
    },
    null
    ));
}

abstract class GetLeaderboardsParams {
  /** The Destiny membershipId of the user to retrieve. */
  String destinyMembershipId;
  /**
   * Maximum number of top players to return. Use a large number to get entire
   * leaderboard.
   */
  int maxtop;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  String modes;
  /** ID of stat to return rather than returning all Leaderboard stats. */
  String statid;
}

/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been
 * implemented. It is being returned for a preview of future functionality, and for
 * public comment/suggestion/preparation.
 */
  Future<ServerResponse<Map<String, Map<String, DestinyLeaderboard>>>> getLeaderboards(HttpClient http, GetLeaderboardsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Stats/Leaderboards/",
    {
      'maxtop': params.maxtop,
      'modes': params.modes,
      'statid': params.statid
    },
    null
    ));
}

abstract class GetLeaderboardsForCharacterParams {
  /**
   * The specific character to build the leaderboard around for the provided Destiny
   * Membership.
   */
  String characterId;
  /** The Destiny membershipId of the user to retrieve. */
  String destinyMembershipId;
  /**
   * Maximum number of top players to return. Use a large number to get entire
   * leaderboard.
   */
  int maxtop;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
  /**
   * List of game modes for which to get leaderboards. See the documentation for
   * DestinyActivityModeType for valid values, and pass in string representation,
   * comma delimited.
   */
  String modes;
  /** ID of stat to return rather than returning all Leaderboard stats. */
  String statid;
}

/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and
 * may experience rough edges. The schema is in final form, but there may be bugs
 * that prevent desirable operation.
 */
  Future<ServerResponse<Map<String, Map<String, DestinyLeaderboard>>>> getLeaderboardsForCharacter(HttpClient http, GetLeaderboardsForCharacterParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Stats/Leaderboards/${params.membershipType}/${params.destinyMembershipId}/${params.characterId}/",
    {
      'maxtop': params.maxtop,
      'modes': params.modes,
      'statid': params.statid
    },
    null
    ));
}

abstract class SearchDestinyEntitiesParams {
  /** Page number to return, starting with 0. */
  int page;
  /** The string to use when searching for Destiny entities. */
  String searchTerm;
  /**
   * The type of entity for whom you would like results. These correspond to the
   * entity's definition contract name. For instance, if you are looking for items,
   * this property should be 'DestinyInventoryItemDefinition'.
   */
  String type;
}

/** Gets a page list of Destiny items. */
  Future<ServerResponse<DestinyEntitySearchResult>> searchDestinyEntities(HttpClient http, SearchDestinyEntitiesParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Armory/Search/${params.type}/${params.searchTerm}/",
    {
      'page': params.page
    },
    null
    ));
}

abstract class GetHistoricalStatsParams {
  /**
   * The id of the character to retrieve. You can omit this character ID or set it to
   * 0 to get aggregate stats across all characters.
   */
  String characterId;
  /** Last day to return when daily stats are requested. Use the format YYYY-MM-DD. */
  String dayend;
  /** First day to return when daily stats are requested. Use the format YYYY-MM-DD */
  String daystart;
  /** The Destiny membershipId of the user to retrieve. */
  String destinyMembershipId;
  /**
   * Group of stats to include, otherwise only general stats are returned. Comma
   * separated list is allowed. Values: General, Weapons, Medals
   */
  List<DestinyStatsGroupType> groups;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
  /**
   * Game modes to return. See the documentation for DestinyActivityModeType for
   * valid values, and pass in string representation, comma delimited.
   */
  List<DestinyActivityModeType> modes;
  /**
   * Indicates a specific period type to return. Optional. May be: Daily, AllTime, or
   * Activity
   */
  PeriodType periodType;
}

/** Gets historical stats for indicated character. */
  Future<ServerResponse<Map<String, DestinyHistoricalStatsByPeriod>>> getHistoricalStats(HttpClient http, GetHistoricalStatsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/",
    {
      'dayend': params.dayend,
      'daystart': params.daystart,
      'groups': params.groups,
      'modes': params.modes,
      'periodType': params.periodType
    },
    null
    ));
}

abstract class GetHistoricalStatsForAccountParams {
  /** The Destiny membershipId of the user to retrieve. */
  String destinyMembershipId;
  /**
   * Groups of stats to include, otherwise only general stats are returned. Comma
   * separated list is allowed. Values: General, Weapons, Medals.
   */
  List<DestinyStatsGroupType> groups;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/**
 * Gets aggregate historical stats organized around each character for a given
 * account.
 */
  Future<ServerResponse<DestinyHistoricalStatsAccountResult>> getHistoricalStatsForAccount(HttpClient http, GetHistoricalStatsForAccountParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Stats/",
    {
      'groups': params.groups
    },
    null
    ));
}

abstract class GetActivityHistoryParams {
  /** The id of the character to retrieve. */
  String characterId;
  /** Number of rows to return */
  int count;
  /** The Destiny membershipId of the user to retrieve. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
  /**
   * A filter for the activity mode to be returned. None returns all activities. See
   * the documentation for DestinyActivityModeType for valid values, and pass in
   * string representation.
   */
  DestinyActivityModeType mode;
  /** Page number to return, starting with 0. */
  int page;
}

/** Gets activity history stats for indicated character. */
  Future<ServerResponse<DestinyActivityHistoryResults>> getActivityHistory(HttpClient http, GetActivityHistoryParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/Activities/",
    {
      'count': params.count,
      'mode': params.mode,
      'page': params.page
    },
    null
    ));
}

abstract class GetUniqueWeaponHistoryParams {
  /** The id of the character to retrieve. */
  String characterId;
  /** The Destiny membershipId of the user to retrieve. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/** Gets details about unique weapon usage, including all exotic weapons. */
  Future<ServerResponse<DestinyHistoricalWeaponStatsData>> getUniqueWeaponHistory(HttpClient http, GetUniqueWeaponHistoryParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/UniqueWeapons/",
    null,
    null
    ));
}

abstract class GetDestinyAggregateActivityStatsParams {
  /** The specific character whose activities should be returned. */
  String characterId;
  /** The Destiny membershipId of the user to retrieve. */
  String destinyMembershipId;
  /** A valid non-BungieNet membership type. */
  BungieMembershipType membershipType;
}

/**
 * Gets all activities the character has participated in together with aggregate
 * statistics for those activities.
 */
  Future<ServerResponse<DestinyAggregateActivityResults>> getDestinyAggregateActivityStats(HttpClient http, GetDestinyAggregateActivityStatsParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/AggregateActivityStats/",
    null,
    null
    ));
}

abstract class GetPublicMilestoneContentParams {
  /** The identifier for the milestone to be returned. */
  int milestoneHash;
}

/** Gets custom localized content for the milestone of the given hash, if it exists. */
  Future<ServerResponse<DestinyMilestoneContent>> getPublicMilestoneContent(HttpClient http, GetPublicMilestoneContentParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Milestones/${params.milestoneHash}/Content/",
    null,
    null
    ));
}

/** Gets public information about currently available Milestones. */
  Future<ServerResponse<Map<int, DestinyPublicMilestone>>> getPublicMilestones(HttpClient http) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Milestones/",
    null,
    null
    ));
}

/** Initialize a request to perform an advanced write action. */
  Future<ServerResponse<AwaInitializeResponse>> awaInitializeRequest(HttpClient http, AwaPermissionRequested body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Awa/Initialize/",
    null,
    body
    ));
}

/**
 * Provide the result of the user interaction. Called by the Bungie Destiny App to
 * approve or reject a request.
 */
  Future<ServerResponse<int>> awaProvideAuthorizationResult(HttpClient http, AwaUserResponse body) {
  return http.request(new HttpClientConfig(
    'POST',
    "https://www.bungie.net/Platform/Destiny2/Awa/AwaProvideAuthorizationResult/",
    null,
    body
    ));
}

abstract class AwaGetActionTokenParams {
  /** The identifier for the advanced write action request. */
  String correlationId;
}

/** Returns the action token if user approves the request. */
  Future<ServerResponse<AwaAuthorizationResult>> awaGetActionToken(HttpClient http, AwaGetActionTokenParams params) {
  return http.request(new HttpClientConfig(
    'GET',
    "https://www.bungie.net/Platform/Destiny2/Awa/GetActionToken/${params.correlationId}/",
    null,
    null
    ));
}
