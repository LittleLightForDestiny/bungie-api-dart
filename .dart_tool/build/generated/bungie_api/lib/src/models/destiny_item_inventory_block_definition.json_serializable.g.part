// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

DestinyItemInventoryBlockDefinition
    _$DestinyItemInventoryBlockDefinitionFromJson(Map<String, dynamic> json) {
  return DestinyItemInventoryBlockDefinition()
    ..stackUniqueLabel = json['stackUniqueLabel'] as String
    ..maxStackSize = json['maxStackSize'] as int
    ..bucketTypeHash = json['bucketTypeHash'] as int
    ..recoveryBucketTypeHash = json['recoveryBucketTypeHash'] as int
    ..tierTypeHash = json['tierTypeHash'] as int
    ..isInstanceItem = json['isInstanceItem'] as bool
    ..tierTypeName = json['tierTypeName'] as String
    ..tierType = _$enumDecodeNullable(_$TierTypeEnumMap, json['tierType'],
        unknownValue: TierType.Unknown)
    ..expirationTooltip = json['expirationTooltip'] as String
    ..expiredInActivityMessage = json['expiredInActivityMessage'] as String
    ..expiredInOrbitMessage = json['expiredInOrbitMessage'] as String
    ..suppressExpirationWhenObjectivesComplete =
        json['suppressExpirationWhenObjectivesComplete'] as bool;
}

Map<String, dynamic> _$DestinyItemInventoryBlockDefinitionToJson(
        DestinyItemInventoryBlockDefinition instance) =>
    <String, dynamic>{
      'stackUniqueLabel': instance.stackUniqueLabel,
      'maxStackSize': instance.maxStackSize,
      'bucketTypeHash': instance.bucketTypeHash,
      'recoveryBucketTypeHash': instance.recoveryBucketTypeHash,
      'tierTypeHash': instance.tierTypeHash,
      'isInstanceItem': instance.isInstanceItem,
      'tierTypeName': instance.tierTypeName,
      'tierType': _$TierTypeEnumMap[instance.tierType],
      'expirationTooltip': instance.expirationTooltip,
      'expiredInActivityMessage': instance.expiredInActivityMessage,
      'expiredInOrbitMessage': instance.expiredInOrbitMessage,
      'suppressExpirationWhenObjectivesComplete':
          instance.suppressExpirationWhenObjectivesComplete,
    };

T _$enumDecode<T>(
  Map<T, dynamic> enumValues,
  dynamic source, {
  T unknownValue,
}) {
  if (source == null) {
    throw ArgumentError('A value must be provided. Supported values: '
        '${enumValues.values.join(', ')}');
  }

  final value = enumValues.entries
      .singleWhere((e) => e.value == source, orElse: () => null)
      ?.key;

  if (value == null && unknownValue == null) {
    throw ArgumentError('`$source` is not one of the supported values: '
        '${enumValues.values.join(', ')}');
  }
  return value ?? unknownValue;
}

T _$enumDecodeNullable<T>(
  Map<T, dynamic> enumValues,
  dynamic source, {
  T unknownValue,
}) {
  if (source == null) {
    return null;
  }
  return _$enumDecode<T>(enumValues, source, unknownValue: unknownValue);
}

const _$TierTypeEnumMap = {
  TierType.Unknown: 0,
  TierType.Currency: 1,
  TierType.Basic: 2,
  TierType.Common: 3,
  TierType.Rare: 4,
  TierType.Superior: 5,
  TierType.Exotic: 6,
};
